<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="49:BlinkAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2adaeac308b8"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2adaea9d5220"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x2adaea9d5220"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x2adaeac08280"/></to>
    </wire>
    <wire loc="51:BlinkAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x2adaeac1ec08"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2adaeae76128"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2adaeae76128"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2adaeacbee28"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:BlinkAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x2adaeac3b330"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x2adaeac79190"/></to>
    </wire>
    <wire loc="40:/opt/tinyos-2.0.2/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x2adaeac79190"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x2adaeac8d5e8"/></to>
    </wire>
    <wire loc="55:BlinkAppC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x2adaeac3a060"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x2adaeae70db8"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x2adaeae70db8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x2adaeae86918"/></to>
    </wire>
    <wire loc="56:BlinkAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2adaeac35020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2adaeae69790"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2adaeae69790"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2adaeae7b8c8"/></to>
    </wire>
    <wire loc="57:BlinkAppC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x2adaeac5a5d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2adaeae68448"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x2adaeae68448"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2adaeae7c2d0"/></to>
    </wire>
    <wire loc="60:BlinkAppC.nc">
      <from><interface-ref name="AttestationRequestSend" scoped="" ref="0x2adaeac64588"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2adaeb39b7a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x2adaeb39b7a8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2adaeb7600c0"/></to>
    </wire>
    <wire loc="63:BlinkAppC.nc">
      <from><interface-ref name="AttestationResponseReceive" scoped="" ref="0x2adaeac777a8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2adaeb38f7a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x2adaeb38f7a8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2adaeae6b020"/>
      <arguments>
        <value cst="I:146">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2adaea9d4620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeb2c2b40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2adaea9d4620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeb72a140"/></to>
    </wire>
    <wire loc="77:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2adaea9d4620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeaf170c0"/></to>
    </wire>
    <wire loc="78:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2adaea9d4620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeb0aa1e8"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2adaea9d4620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeacb5758"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2adaeac088b8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2adaea8e15c8"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x2adaea8e15c8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x2adaea98d020"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2adaeac07398"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaea9c9618"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2adaea9c9618"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaea9d8020"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x2adaeac07a60"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x2adaea9d4620"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2adaea9d1198"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeb154980"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2adaea9da490"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2adaeabe6708"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x2adaea9d8d88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeabe60d8"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2adaea9d86c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeacb3a80"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x2adaea9d86c0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9d0680"/></to>
    </wire>
    <wire loc="23:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9d0680"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9ddc78"/></to>
    </wire>
    <wire loc="24:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9d0680"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9f8358"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2adaea9d0d10"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2adaea9d1198"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9f8358"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2adaeaa31700"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9f8358"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x2adaeaa63140"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x2adaea9e7020"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x2adaeaa95af0"/></to>
    </wire>
    <wire loc="132:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x2adaeaa95af0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2adaeab15430"/></to>
    </wire>
    <wire loc="27:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x2adaea9e6198"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x2adaea9d0d10"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="CHP_OUT" scoped="" ref="0x2adaeaa44c28"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x2adaeaa93e00"/></to>
    </wire>
    <wire loc="134:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x2adaeaa93e00"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2adaeab13740"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PALE" scoped="" ref="0x2adaeaa3ddf0"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x2adaeaaa97e0"/></to>
    </wire>
    <wire loc="159:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x2adaeaaa97e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2adaeab43430"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PCLK" scoped="" ref="0x2adaeaa43020"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x2adaeaaa7af0"/></to>
    </wire>
    <wire loc="161:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x2adaeaaa7af0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2adaeab40740"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PDATA" scoped="" ref="0x2adaeaa42198"/></from>
      <to><interface-ref name="PortD7" scoped="" ref="0x2adaeaaa6c78"/></to>
    </wire>
    <wire loc="162:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x2adaeaaa6c78"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2adaeab3f8c8"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiSck" scoped="" ref="0x2adaeaa629e8"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x2adaeaa8f348"/></to>
    </wire>
    <wire loc="138:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x2adaeaa8f348"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2adaeab1ca50"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMiso" scoped="" ref="0x2adaeaa61c80"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x2adaeaa9d658"/></to>
    </wire>
    <wire loc="140:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x2adaeaa9d658"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2adaeab1ad60"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMosi" scoped="" ref="0x2adaeaa69e08"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x2adaeaa8e4d0"/></to>
    </wire>
    <wire loc="139:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x2adaeaa8e4d0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2adaeab1bbd8"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="OC1C" scoped="" ref="0x2adaeaa67020"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x2adaeaa98e00"/></to>
    </wire>
    <wire loc="144:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x2adaeaa98e00"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2adaeab272a8"/></to>
    </wire>
    <wire loc="182:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x2adaeaac27e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeab94970"/></to>
    </wire>
    <wire loc="156:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x2adaeaaac348"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2adaeab34020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2adaeab34020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb50a970"/></to>
    </wire>
    <wire loc="167:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x2adaeaab1348"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2adaeab48d60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2adaeab48d60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb553970"/></to>
    </wire>
    <wire loc="176:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x2adaeaab7020"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2adaeab615b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2adaeab615b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb5a9970"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2adaeab13740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb3ef020"/></to>
    </wire>
    <wire loc="174:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x2adaeaabac78"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2adaeab4f2a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2adaeab4f2a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb5af970"/></to>
    </wire>
    <wire loc="137:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x2adaeaa901a0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2adaeab1e930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2adaeab1e930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb443448"/></to>
    </wire>
    <wire loc="148:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x2adaeaaa4348"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2adaeab30740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2adaeab30740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb484710"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2adaeab43430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb501970"/></to>
    </wire>
    <wire loc="170:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x2adaeaabd7e0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2adaeab44120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2adaeab44120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb54a970"/></to>
    </wire>
    <wire loc="129:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x2adaeaa88658"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2adaeab07020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2adaeab07020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb3c8020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2adaeab1ad60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb43a480"/></to>
    </wire>
    <wire loc="151:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x2adaeaaa17e0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2adaeab2dbd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2adaeab2dbd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb4b3710"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2adaeab3f8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb4f8970"/></to>
    </wire>
    <wire loc="179:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x2adaeaac44d0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2adaeab5ea50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2adaeab5ea50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb5dd970"/></to>
    </wire>
    <wire loc="185:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x2adaeaabe1a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeabad020"/></to>
    </wire>
    <wire loc="165:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x2adaeaab3020"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2adaeab4ba50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2adaeab4ba50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb559970"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2adaeab15430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb3f5020"/></to>
    </wire>
    <wire loc="143:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x2adaeaa99c78"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2adaeab28120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2adaeab28120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb431480"/></to>
    </wire>
    <wire loc="183:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x2adaeaac1e00"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeaba3ab0"/></to>
    </wire>
    <wire loc="146:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x2adaeaa96020"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2adaeab20500"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2adaeab20500"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb48a6a8"/></to>
    </wire>
    <wire loc="157:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x2adaeaaab4d0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2adaeab33120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2adaeab33120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb507970"/></to>
    </wire>
    <wire loc="168:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x2adaeaab04d0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2adaeab47e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2adaeab47e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb550970"/></to>
    </wire>
    <wire loc="177:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x2adaeaab61a0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2adaeab60740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2adaeab60740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb5a6970"/></to>
    </wire>
    <wire loc="135:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x2adaeaa91020"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2adaeab128c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2adaeab128c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb3ec020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2adaeab1ca50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb440480"/></to>
    </wire>
    <wire loc="149:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x2adaeaaa34d0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2adaeab2f8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2adaeab2f8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb481710"/></to>
    </wire>
    <wire loc="160:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x2adaeaaa8968"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2adaeab425b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2adaeab425b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb4fe970"/></to>
    </wire>
    <wire loc="171:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x2adaeaabc968"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2adaeab572a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2adaeab572a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb583970"/></to>
    </wire>
    <wire loc="130:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x2adaeaa877e0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2adaeab06120"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2adaeab06120"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb3c5020"/></to>
    </wire>
    <wire loc="141:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x2adaeaa9c7e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2adaeab19e18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2adaeab19e18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb437480"/></to>
    </wire>
    <wire loc="152:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x2adaeaaa0968"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x2adaeab2cd60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2adaeab2cd60"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb4b0710"/></to>
    </wire>
    <wire loc="180:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x2adaeaac3658"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2adaeab5dbd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2adaeab5dbd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb5da970"/></to>
    </wire>
    <wire loc="155:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x2adaeaa9ec78"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2adaeab36e40"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2adaeab36e40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb50d970"/></to>
    </wire>
    <wire loc="166:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x2adaeaab21a0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2adaeab4abd8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2adaeab4abd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb556970"/></to>
    </wire>
    <wire loc="175:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x2adaeaab9e00"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x2adaeab4e430"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2adaeab4e430"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb5ac970"/></to>
    </wire>
    <wire loc="186:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x2adaeaace348"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeaba8180"/></to>
    </wire>
    <wire loc="133:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x2adaeaa94c78"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2adaeab145b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2adaeab145b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb3f2020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2adaeab272a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb42e480"/></to>
    </wire>
    <wire loc="173:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x2adaeaabbaf0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2adaeab501e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2adaeab501e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb5b3970"/></to>
    </wire>
    <wire loc="147:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x2adaeaaa51a0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x2adaeab315b8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x2adaeab315b8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb487710"/></to>
    </wire>
    <wire loc="158:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x2adaeaaaa658"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2adaeab322a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2adaeab322a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb504970"/></to>
    </wire>
    <wire loc="169:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x2adaeaaae658"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2adaeab45020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2adaeab45020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb54d970"/></to>
    </wire>
    <wire loc="178:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x2adaeaac5348"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2adaeab5f8c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2adaeab5f8c8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb5e0970"/></to>
    </wire>
    <wire loc="128:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x2adaeaa893f0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2adaeab09dc0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2adaeab09dc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb3cb020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x2adaeab1bbd8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb43d480"/></to>
    </wire>
    <wire loc="150:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x2adaeaaa2658"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x2adaeab2ea50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x2adaeab2ea50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb4b6710"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x2adaeab40740"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb4fb970"/></to>
    </wire>
    <wire loc="184:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x2adaeaabf020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeab9fc38"/></to>
    </wire>
    <wire loc="164:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x2adaeaab5e00"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x2adaeab4c930"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x2adaeab4c930"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb55c970"/></to>
    </wire>
    <wire loc="153:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x2adaeaa9faf0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x2adaeab2be18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x2adaeab2be18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb4ad710"/></to>
    </wire>
    <wire loc="131:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x2adaeaa86968"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x2adaeab052a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x2adaeab052a8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb3c2020"/></to>
    </wire>
    <wire loc="142:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x2adaeaa9baf0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x2adaeab17020"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x2adaeab17020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x2adaeb434480"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea98de58"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x2adaea994328"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x2adaea9ac020"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x2adaea9b3c10"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x2adaead73e18"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2adaeacb3a80"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeac8d020"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.0.2/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x2adaeac8cce8"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x2adaeac8e548"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x2adaeac8e548"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x2adaeaa877e0"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.0.2/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x2adaeac8be70"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x2adaeac9d810"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x2adaeac9d810"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x2adaeaa88658"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.0.2/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x2adaeac89020"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x2adaeacb4998"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x2adaeacb4998"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x2adaeaa893f0"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2adaeacbee28"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2adaeaccb4a0"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x2adaeaccb4a0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2adaeae550c8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2adaeacb5758"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeacd8020"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x2adaeacc1980"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x2adaeae667f8"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2adaeacd8020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeaddd1f0"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x2adaeae4f5a0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2adaeae0aab0"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x2adaeae05c70"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x2adaeacd0838"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x2adaeacd0838"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2adaeaddd998"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x2adaeae5d9d0"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x2adaeace2e40"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x2adaeace2e40"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2adaeadd9a90"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x2adaeadd9a90"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x2adaeb6a4738"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x2adaeaddd1f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeb660ce8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x2adaeaddd998"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x2adaeb65f4f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2adaeb6a1a28"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2adaead55de8"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x2adaead55de8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2adaead63cf8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2adaeb69c978"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2adaead69020"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x2adaead69020"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x2adaead78d20"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x2adaeb69b848"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2adaead68020"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x2adaead68020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x2adaead77d10"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerAsync" scoped="" ref="0x2adaeb6978c0"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x2adaead64228"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x2adaead64228"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x2adaead72558"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x2adaeae01cf0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x2adaeae4a618"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x2adaeae86918"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x2adaeae97c18"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x2adaeae6dd80"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2adaeae80920"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x2adaeae80920"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2adaeae79e58"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x2adaeae6be78"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x2adaeae7d9a0"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x2adaeae7d9a0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x2adaeae94e78"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2adaeae7b8c8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2adaeaee4d20"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x2adaeae6b020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2adaeae7eab0"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x2adaeae7eab0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2adaeae94020"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeae82470"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeae7a658"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeae7a658"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeaee1080"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x2adaeae7c2d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2adaeae937a8"/></to>
    </wire>
    <wire loc="80:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x2adaeae97c18"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x2adaeaf176d8"/></to>
    </wire>
    <wire loc="83:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2adaeaee4d20"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2adaeafe02a8"/></to>
    </wire>
    <wire loc="89:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeaee1080"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeafde7e0"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x2adaeae8a330"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x2adaeaee5730"/></to>
    </wire>
    <wire loc="81:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x2adaeaee5730"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x2adaeafbd4d8"/></to>
    </wire>
    <wire loc="70:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x2adaeae90020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2adaeaee4438"/></to>
    </wire>
    <wire loc="82:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x2adaeaee4438"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x2adaeafbc108"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x2adaeae8f9c8"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x2adaeb2d5328"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2adaeae90988"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2adaeaee4d20"/></to>
    </wire>
    <wire loc="87:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x2adaeaef0260"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x2adaeaf14318"/></to>
    </wire>
    <wire loc="85:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaControl" scoped="" ref="0x2adaeaee0de0"/></from>
      <to><interface-ref name="CsmaControl" scoped="" ref="0x2adaeaf162d8"/></to>
    </wire>
    <wire loc="86:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaBackoff" scoped="" ref="0x2adaeaedc0d0"/></from>
      <to><interface-ref name="CsmaBackoff" scoped="" ref="0x2adaeaf16a68"/></to>
    </wire>
    <wire loc="88:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RadioTimeStamping" scoped="" ref="0x2adaeaeda818"/></from>
      <to><interface-ref name="RadioTimeStamping" scoped="" ref="0x2adaeafbca60"/></to>
    </wire>
    <wire loc="91:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x2adaeaf1d538"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x2adaeb09d7a8"/></to>
    </wire>
    <wire loc="92:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x2adaeaf3abd8"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x2adaeb2c3a50"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x2adaeb2c3a50"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x2adaeb2bd5e8"/></to>
    </wire>
    <wire loc="93:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Squelch" scoped="" ref="0x2adaeaf3ce50"/></from>
      <to><interface-ref name="CC1000Squelch" scoped="" ref="0x2adaeb0aa808"/></to>
    </wire>
    <wire loc="94:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="WakeupTimer" scoped="" ref="0x2adaeaf3d620"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x2adaeb2c6a60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x2adaeb2c6a60"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x2adaeacbee28"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadio" scoped="" ref="0x2adaeaf28740"/></from>
      <to><interface-ref name="ByteRadio" scoped="" ref="0x2adaeafdf020"/></to>
    </wire>
    <wire loc="96:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioInit" scoped="" ref="0x2adaeaf13878"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeafc1760"/></to>
    </wire>
    <wire loc="97:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioControl" scoped="" ref="0x2adaeaf0f6f8"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x2adaeafc1d60"/></to>
    </wire>
    <wire loc="99:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x2adaeafdd1e8"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x2adaeb09d7a8"/></to>
    </wire>
    <wire loc="100:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x2adaeafdcb90"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x2adaeb122908"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x2adaeb122908"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x2adaeaa6a630"/></to>
    </wire>
    <wire loc="101:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x2adaeafd9b10"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x2adaeb2d5328"/></to>
    </wire>
    <wire loc="102:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiRx" scoped="" ref="0x2adaeafda100"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x2adaeb09c050"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="104:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiNoiseFloor" scoped="" ref="0x2adaeaf2e838"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x2adaeb09c050"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="105:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiCheckChannel" scoped="" ref="0x2adaeaf30108"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x2adaeb09c050"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiPulseCheck" scoped="" ref="0x2adaeaf4e920"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x2adaeb09c050"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="107:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="cancelRssi" scoped="" ref="0x2adaeaf4b328"/></from>
      <to><function-ref name="cancel" scoped="" ref="0x2adaeb09b9e8"/></to>
    </wire>
    <wire loc="108:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x2adaeaf341e0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x2adaeb2d7be0"/></to>
    </wire>
    <wire loc="110:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ActualRssi" scoped="" ref="0x2adaeb09ae28"/></from>
      <to><interface-ref name="RssiAdc" scoped="" ref="0x2adaeb1244e0"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiAdc" scoped="" ref="0x2adaeb1244e0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2adaeb2cc128"/></to>
    </wire>
    <wire loc="111:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2adaeb09a020"/></from>
      <to><interface-ref name="RssiResource" scoped="" ref="0x2adaeb123b80"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x2adaeb123b80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2adaeb2cd438"/></to>
    </wire>
    <wire loc="112:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC" scoped="" ref="0x2adaeb0be318"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x2adaeb121bf8"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000" scoped="" ref="0x2adaeb121bf8"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x2adaeaa397e8"/></to>
    </wire>
    <wire loc="113:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x2adaeb0bc080"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x2adaeb2d7be0"/></to>
    </wire>
    <wire loc="108:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="setWakeupTask" scoped="" ref="0x2adaeaf47de8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="startStopDone" scoped="" ref="0x2adaeaf531c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="293:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="sleepCheck" scoped="" ref="0x2adaeaf645c8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="adjustSquelch" scoped="" ref="0x2adaeaf83b60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="376:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketSent" scoped="" ref="0x2adaeb03fbd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="547:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketReceived" scoped="" ref="0x2adaeb05e908"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ReadNow" scoped="" ref="0x2adaeb2cc128"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2adaeb13b620"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2adaeb2cd438"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2adaeb15eaf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2adaeb2cb748"/></from>
      <to><interface-ref name="RssiConfig" scoped="" ref="0x2adaeaa441f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2adaeb135208"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2adaeb2cb748"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb158890"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb2ca020"/></to>
    </wire>
    <wire loc="30:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x2adaeb138a00"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2adaeb28d020"/></to>
    </wire>
    <wire loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x2adaeb13b620"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x2adaeb285c38"/></to>
    </wire>
    <wire loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2adaeb2a3020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2adaeb15f050"/></to>
    </wire>
    <wire loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2adaeb281208"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2adaeb135208"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x2adaeb2a6860"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x2adaeb286020"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2adaeb282358"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2adaeb155cb8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2adaeb155cb8"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2adaeb14a080"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2adaeb14f9b0"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2adaeb14a9d8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x2adaeb15eaf0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2adaeb24c840"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x2adaeb24c840"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x2adaeb728830"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb2483c8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb158890"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2adaeb166888"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2adaeb18c020"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x2adaeb18c020"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x2adaeb1b6db8"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x2adaeb172d30"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x2adaea9da490"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2adaeb246c30"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2adaeb175860"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb245988"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb24add8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb24add8"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb727dd8"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x2adaeb1b1330"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x2adaea9b4480"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x2adaeb24a698"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x2adaeb727698"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2adaeb2499d8"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2adaeb7269d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb7243e8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb2483c8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x2adaeb724b68"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x2adaeb72a718"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x2adaeb722da0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x2adaeb7367f8"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x2adaeb246c30"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x2adaeb735020"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x2adaeb2453f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb7355b8"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb245988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x2adaeb734268"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x2adaeb25e578"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x2adaeb2a00c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="42:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x2adaeb2bd5e8"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x2adaeb2e8100"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x2adaeb2c1980"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x2adaeb2be528"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x2adaeb2be528"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x2adaeb2e9020"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2adaeb125c50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeb2c2b40"/></to>
    </wire>
    <wire loc="40:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x2adaeb2c2b40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x2adaeb2bb6c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x2adaeb39a3f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2adaeae69790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x2adaeb399020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2adaeae68448"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x2adaeb3985b8"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeae82470"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x2adaeb760cd8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x2adaeb322b88"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x2adaeb75e908"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2adaeae68448"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x2adaeb322b88"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x2adaeb375660"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x2adaeb3733e8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x2adaeae6dd80"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x2adaeb372020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2adaeae68448"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x2adaeb371578"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2adaeae69790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="errorTask" scoped="" ref="0x2adaeb3702e8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CancelTask" scoped="" ref="0x2adaeb370a88"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x2adaeb38d080"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x2adaeae69790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x2adaeb38dc38"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x2adaeae68448"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="45:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <documentation loc="34:/opt/tinyos-2.0.2/tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="35:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000InitP" loc="36:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
        <short>&#10; Hardware initialisation for the CC1000 radio.</short>
        <long>&#10; Hardware initialisation for the CC1000 radio. This component is always&#10; included even if the radio is not used.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000P" loc="41:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <module/>
    </component>
    <component qname="HplCC1000SpiP" loc="40:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
        <short>&#10; Low-level functions to access the CC1000 bus.</short>
        <long>&#10; Low-level functions to access the CC1000 bus. Built using the mica2&#10; hardware SPI.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/opt/tinyos-2.0.2/tos/platforms/mica/MeasureClockC.nc">
      <documentation loc="14:/opt/tinyos-2.0.2/tos/platforms/mica/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="45:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <documentation loc="38:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="35:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="43:/opt/tinyos-2.0.2/tos/system/SchedulerBasicP.nc">
      <module/>
    </component>
    <component qname="McuSleepC" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
      <documentation loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.8 2007/04/08 01:17:12 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkC" loc="34:BlinkC.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="34:/opt/tinyos-2.0.2/tos/system/LedsC.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="33:/opt/tinyos-2.0.2/tos/system/LedsP.nc">
      <documentation loc="24:/opt/tinyos-2.0.2/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="33:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
        <short>&#10; Platform-specific LED interface.</short>
        <long>&#10; Platform-specific LED interface.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BlinkAppC.Timer0" loc="36(BlinkAppC.Timer0):/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="33:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2adaeacdd0a8"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="35(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="35(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="35(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="46:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <documentation loc="38:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
        <short>&#10; The Active Message layer on the mica2 platform.</short>
        <long>&#10; The Active Message layer on the mica2 platform. This is a naming wrapper&#10; around the CC1000 Active Message layer.&#10;&#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageC" loc="44:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <documentation loc="32:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer for the CC1000 radio.</short>
        <long>&#10;&#10; The Active Message layer for the CC1000 radio. This configuration&#10; just layers the AM dispatch (CC1000ActiveMessageM) on top of the&#10; underlying CC1000 radio packet (CC1000CsmaRadioC), which is&#10; inherently an AM packet (acknowledgements based on AM destination&#10; addr and group).&#10; &#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageP" loc="38:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
        <short>&#10; Implementation component for CC1000ActiveMessageC.</short>
        <long>&#10; Implementation component for CC1000ActiveMessageC.&#10;&#10; @author Philip Levis&#10; @date June 19 2006&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC" loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
        <short>&#10; A low-power-listening CC1000 radio stack.</short>
        <long>&#10; A low-power-listening CC1000 radio stack.&#10;&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). &#10;&#10; CC1000RssiP (RSSI sharing), CC1000SquelchP (noise-floor estimation)&#10; and CC1000ControlP (radio configuration) provide supporting roles.&#10;&#10; This code has some degree of platform-independence, via the HplCC1000,&#10; RssiAdc and HplCC1000Spi interfaces which must be provided by the&#10; platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000CsmaP" loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <documentation loc="37:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the CSMA and low-power listening logic. Actual&#10; packet transmission and reception is in SendReceive.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SendReceiveP" loc="55:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <documentation loc="36:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the send and receive logic for the CC1000 radio.&#10; It does not do any media-access control. It requests the channel&#10; via the ready-to-send event (rts) and starts transmission on reception&#10; of the clear-to-send command (cts). It listens for packets if the&#10; listen() command is called, and stops listening when off() is called.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000RssiP" loc="44:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
        <short>&#10;   RSSI fun.</short>
        <long>&#10;   RSSI fun. It's used for lots of things, and a request to read it&#10;   for one purpose may have to be discarded if conditions change. For&#10;   example, if we've initiated a noise-floor measure, but start &#10;   receiving a packet, we have to:&#60;ul>&#10;   &#60;li>cancel the noise-floor measure (we don't know if the value will&#10;     reflect the received packet or the previous idle state)&#10;   &#60;li>start an RSSI measurement so that we can report signal strength&#10;     to the application&#10;   &#60;/ul>&#60;p>&#10;   This module hides the complexities of cancellation from the rest of&#10;   the stack.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SquelchP" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SquelchP.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SquelchP.nc">
        <short>&#10; Clear threshold estimation based on RSSI measurements.</short>
        <long>&#10; Clear threshold estimation based on RSSI measurements.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000ControlP" loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
      <documentation loc="32:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
        <short>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.</short>
        <long>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.  It exports a custom interface to control CC1000&#10; operation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000C" loc="35:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
        <short>&#10; HPL for the CC1000 radio, for the mica2 platform.</short>
        <long>&#10; HPL for the CC1000 radio, for the mica2 platform.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000C.RssiChannel" loc="21(HplCC1000C.RssiChannel):/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <documentation loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <documentation loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="79(Atm128AdcC.AdcArbiter):/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="59:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="32(Atm128AdcC.AdcArbiter.Queue):/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="57(Atm128AdcC.PM):/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="48(Atm128AdcC.PM.PowerManager):/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <documentation loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="32:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="31:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
        <short>&#10; This is the configuration for RandomMlcgC, a &#10; multiplicative linear congruential generator.</short>
        <long>&#10; This is the configuration for RandomMlcgC, a &#10; multiplicative linear congruential generator. &#10;&#10; @author  Barbara Hohlt&#10; @author  Philip Levis&#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgP" loc="34:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
      <documentation loc="21:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC.TimerMilliC" loc="36(CC1000CsmaRadioC.TimerMilliC):/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="41:/opt/tinyos-2.0.2/tos/system/ActiveMessageAddressC.nc">
      <documentation loc="34:/opt/tinyos-2.0.2/tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="38:/opt/tinyos-2.0.2/tos/platforms/mica/BusyWaitMicroC.nc">
      <documentation loc="29:/opt/tinyos-2.0.2/tos/platforms/mica/BusyWaitMicroC.nc">
        <short>&#10; Busy wait component as per TEP102.</short>
        <long>&#10; Busy wait component as per TEP102. Supports waiting for at least some&#10; number of microseconds. This functionality should be used sparingly,&#10; when the overhead of posting a Timer or Alarm is greater than simply&#10; busy waiting.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BlinkAppC.AttestationRequestSender" loc="39(BlinkAppC.AttestationRequestSender):/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:147">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="BlinkAppC.AttestationRequestSender.AMQueueEntryP" loc="35(BlinkAppC.AttestationRequestSender.AMQueueEntryP):/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="34:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="37(AMQueueP.AMQueueImplP):/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BlinkAppC.AttestationResponseReceiver" loc="35(BlinkAppC.AttestationResponseReceiver):/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:146">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2adaeaaca560" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2adaeaaca8a8" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2adaeaacabf0" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2adaeaad0e08" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2adaeaadf198" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2adaeaadf500" loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2adaeaadf830" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x2adaeab68020" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x2adaeab68388" loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x2adaeab686f0" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x2adaeab68a20" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="36:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2adaeacdd0a8" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2adaeacdd0a8"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2adaeacdd398" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x2adaeacef720" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x2adaeacef720"/></type-var>
        </typedef>
        <constant name="divider" ref="0x2adaeacefa10" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2adaeacd9c60" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2adaeacd9c60"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc" abstract="">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2adaeadffcc8" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2adaeadffcc8"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x2adaeae19020" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2adaeae67720" loc="35:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2adaeae67720"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadNowClientC" loc="21:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="79:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="59:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x2adaeb1d57e0" loc="79:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="32:/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc" abstract="">
      <parameters>
        <constant name="size" ref="0x2adaeb1f8dd0" loc="32:/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc" abstract="">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x2adaeb2035c0" loc="52:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="57:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="48:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc" abstract="">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x2adaeb28fe80" loc="23:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x2adaeb28fe80"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="39:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x2adaeb309bd8" loc="39:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="35:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x2adaeb3364c0" loc="35:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="37:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x2adaeb34c020" loc="37:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="35:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x2adaeb396e50" loc="35:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x2adaea9d4620" loc="47:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2adaea9d4620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9d4970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2adaea9d5220" loc="46:/opt/tinyos-2.0.2/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2adaea9d5220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2adaea9d5570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2adaea9d1198" loc="43:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2adaea9d1198"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9d14e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaea9c9618" loc="37:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaea9c9618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9c9968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2adaea9da490" loc="41:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2adaea9da490"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2adaea9da7e0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2adaea9da968"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2adaea9daaf0"/>
        <function-ref name="actualMicro" scoped="" ref="0x2adaea9dac78"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2adaea9dae00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x2adaea9d86c0" loc="36:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x2adaea9d86c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9d8a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaea9d8020" loc="35:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaea9d8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9d8370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x2adaea9d8d88" loc="37:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x2adaea9d8d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9d6170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2adaea9d0d10" loc="18:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2adaea9d0d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9dd0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2adaea9d0680" loc="17:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9d0680"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9d09d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x2adaea9e6198" loc="19:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x2adaea9e6198"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9e64e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x2adaea9e7020" loc="18:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x2adaea9e7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaea9e7370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaea9e74f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaea9e7680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaea9e7808"/>
        <function-ref name="get" scoped="" ref="0x2adaea9e7990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaea9e7b18"/>
        <function-ref name="set" scoped="" ref="0x2adaea9e7ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaea9e7e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2adaea9ddc78" loc="17:/opt/tinyos-2.0.2/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9ddc78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9e8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2adaea9f8358" loc="37:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <component-ref qname="HplCC1000InitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2adaea9f8358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea9f86a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PCLK" ref="0x2adaeaa43020" loc="51:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PCLK" scoped="" ref="0x2adaeaa43020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa43370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa434f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa43680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa43808"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa43990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa43b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa43ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa43e28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CHP_OUT" ref="0x2adaeaa44c28" loc="49:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CHP_OUT" scoped="" ref="0x2adaeaa44c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa3d020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa3d1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa3d330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa3d4b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa3d640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa3d7c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa3d950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa3dad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiConfig" ref="0x2adaeaa441f8" loc="45:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiConfig" scoped="" ref="0x2adaeaa441f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2adaeaa44548"/>
        <function-ref name="getChannel" scoped="" ref="0x2adaeaa446d0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2adaeaa44858"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PALE" ref="0x2adaeaa3ddf0" loc="50:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PALE" scoped="" ref="0x2adaeaa3ddf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa38170"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa382f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa38480"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa38608"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa38790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa38918"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa38aa0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa38c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2adaeaa31700" loc="43:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2adaeaa31700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeaa31a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PDATA" ref="0x2adaeaa42198" loc="52:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PDATA" scoped="" ref="0x2adaeaa42198"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa424e8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa42670"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa427f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa42980"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa42b08"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa42c90"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa42e18"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa41020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x2adaeaa397e8" loc="44:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x2adaeaa397e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeaa39b38"/>
        <function-ref name="read" scoped="" ref="0x2adaeaa39cc0"/>
        <function-ref name="write" scoped="" ref="0x2adaeaa39e48"/>
        <function-ref name="getLOCK" scoped="" ref="0x2adaeaa3e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x2adaeaa6a630" loc="42:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x2adaeaa6a630"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x2adaeaa6a980"/>
        <function-ref name="initSlave" scoped="" ref="0x2adaeaa6ab08"/>
        <function-ref name="disableIntr" scoped="" ref="0x2adaeaa6ac90"/>
        <function-ref name="writeByte" scoped="" ref="0x2adaeaa6ae18"/>
        <function-ref name="enableIntr" scoped="" ref="0x2adaeaa62020"/>
        <function-ref name="txMode" scoped="" ref="0x2adaeaa621a8"/>
        <function-ref name="readByte" scoped="" ref="0x2adaeaa62330"/>
        <function-ref name="rxMode" scoped="" ref="0x2adaeaa624b8"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeaa62640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiSck" ref="0x2adaeaa629e8" loc="45:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiSck" scoped="" ref="0x2adaeaa629e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa62d38"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa61020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa611a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa61330"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa614b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa61640"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa617c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa61950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x2adaeaa63140" loc="41:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2adaeaa63140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeaa63490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMiso" ref="0x2adaeaa61c80" loc="46:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMiso" scoped="" ref="0x2adaeaa61c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa69020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa691a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa69330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa694b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa69640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa697c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa69950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa69ad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMosi" ref="0x2adaeaa69e08" loc="47:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMosi" scoped="" ref="0x2adaeaa69e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa681a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa68330"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa684b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa68640"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa687c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa68950"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa68ad8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa68c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OC1C" ref="0x2adaeaa67020" loc="48:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="OC1C" scoped="" ref="0x2adaeaa67020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa67370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa674f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa67680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa67808"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa67990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa67b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa67ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa67e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x2adaeaac27e0" loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x2adaeaac27e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaac1020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaac11a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaac1330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaac14b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaac1640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaac17c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaac1950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaac1ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x2adaeaaac348" loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x2adaeaaac348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaac698"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaac820"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaac9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaacb30"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaaccb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaace40"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaab020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaab1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x2adaeaab1348" loc="76:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x2adaeaab1348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab1698"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab1820"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab19a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab1b30"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab1cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaab1e40"/>
        <function-ref name="set" scoped="" ref="0x2adaeaab0020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaab01a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x2adaeaab7020" loc="85:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x2adaeaab7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab7370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab74f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab7680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab7808"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab7990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaab7b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeaab7ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaab7e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x2adaeaa93e00" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x2adaeaa93e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa921a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa92330"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa924b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa92640"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa927c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa92950"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa92ad8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa92c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x2adaeaabac78" loc="83:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x2adaeaabac78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab9020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab91a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab9330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab94b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab9640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaab97c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaab9950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaab9ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x2adaeaa901a0" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x2adaeaa901a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa904f0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa90678"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa90800"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa90988"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa90b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa90c98"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa90e20"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa8f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x2adaeaaa4348" loc="57:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x2adaeaaa4348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaa4698"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaa4820"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaa49a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaa4b30"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaa4cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaa4e40"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaa3020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaa31a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x2adaeaaa97e0" loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x2adaeaaa97e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaa9b30"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaa9cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaa9e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaa8020"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaa81a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaa8330"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaa84b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaa8640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x2adaeaabd7e0" loc="79:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x2adaeaabd7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaabdb30"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaabdcb8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaabde40"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaabc020"/>
        <function-ref name="get" scoped="" ref="0x2adaeaabc1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaabc330"/>
        <function-ref name="set" scoped="" ref="0x2adaeaabc4b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaabc640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x2adaeaa88658" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x2adaeaa88658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa889a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa88b30"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa88cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa88e40"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa87020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa871a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa87330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa874b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x2adaeaa9d658" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x2adaeaa9d658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa9d9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa9db30"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa9dcb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa9de40"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa9c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa9c1a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa9c330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa9c4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x2adaeaaa17e0" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x2adaeaaa17e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaa1b30"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaa1cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaa1e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaa0020"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaa01a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaa0330"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaa04b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaa0640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x2adaeaaa6c78" loc="71:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x2adaeaaa6c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab5020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab51a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab5330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab54b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab5640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaab57c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaab5950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaab5ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x2adaeaac44d0" loc="88:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x2adaeaac44d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaac4820"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaac49a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaac4b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaac4cb8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaac4e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaac3020"/>
        <function-ref name="set" scoped="" ref="0x2adaeaac31a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaac3330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x2adaeaabe1a0" loc="94:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x2adaeaabe1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaabe4f0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaabe678"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaabe800"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaabe988"/>
        <function-ref name="get" scoped="" ref="0x2adaeaabeb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaabec98"/>
        <function-ref name="set" scoped="" ref="0x2adaeaabee20"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaace020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x2adaeaab3020" loc="74:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x2adaeaab3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab3370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab34f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab3680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab3808"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab3990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaab3b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeaab3ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaab3e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x2adaeaa95af0" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x2adaeaa95af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa95e40"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa94020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa941a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa94330"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa944b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa94640"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa947c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa94950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x2adaeaa99c78" loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x2adaeaa99c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa98020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa981a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa98330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa984b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa98640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa987c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa98950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa98ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x2adaeaac1e00" loc="92:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x2adaeaac1e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaac01a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaac0330"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaac04b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaac0640"/>
        <function-ref name="get" scoped="" ref="0x2adaeaac07c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaac0950"/>
        <function-ref name="set" scoped="" ref="0x2adaeaac0ad8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaac0c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x2adaeaa96020" loc="55:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x2adaeaa96020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa96370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa964f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa96680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa96808"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa96990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa96b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa96ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa96e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x2adaeaaab4d0" loc="66:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x2adaeaaab4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaab820"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaab9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaabb30"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaabcb8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaabe40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaaa020"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaaa1a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaaa330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x2adaeaab04d0" loc="77:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x2adaeaab04d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab0820"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab09a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab0b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab0cb8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab0e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaae020"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaae1a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaae330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x2adaeaab61a0" loc="86:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x2adaeaab61a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab64f0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab6678"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab6800"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab6988"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaab6c98"/>
        <function-ref name="set" scoped="" ref="0x2adaeaab6e20"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaac5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x2adaeaa91020" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x2adaeaa91020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa91370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa914f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa91680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa91808"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa91990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa91b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa91ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa91e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x2adaeaa8f348" loc="47:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x2adaeaa8f348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa8f698"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa8f820"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa8f9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa8fb30"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa8fcb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa8fe40"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa8e020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa8e1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x2adaeaaa34d0" loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x2adaeaaa34d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaa3820"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaa39a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaa3b30"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaa3cb8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaa3e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaa2020"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaa21a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaa2330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x2adaeaaa8968" loc="69:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x2adaeaaa8968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaa8cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaa8e40"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaa7020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaa71a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaa7330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaa74b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaa7640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaa77c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x2adaeaabc968" loc="80:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x2adaeaabc968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaabccb8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaabce40"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaabb020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaabb1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaabb330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaabb4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaabb640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaabb7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x2adaeaa877e0" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x2adaeaa877e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa87b30"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa87cb8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa87e40"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa86020"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa861a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa86330"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa864b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa86640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x2adaeaa9c7e0" loc="50:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x2adaeaa9c7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa9cc30"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa9cdb8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa9b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa9b1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa9b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa9b4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa9b640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa9b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x2adaeaaa0968" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x2adaeaaa0968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaa0cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaa0e40"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa9f020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa9f1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa9f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa9f4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa9f640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa9f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x2adaeaac3658" loc="89:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x2adaeaac3658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaac39a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaac3b30"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaac3cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaac3e40"/>
        <function-ref name="get" scoped="" ref="0x2adaeaac2020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaac21a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaac2330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaac24b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x2adaeaa9ec78" loc="64:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x2adaeaa9ec78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaad3e8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaad570"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaad6f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaad880"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaada08"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaadb90"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaadd18"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x2adaeaab21a0" loc="75:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x2adaeaab21a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab24f0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab2678"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab2800"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab2988"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaab2c98"/>
        <function-ref name="set" scoped="" ref="0x2adaeaab2e20"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaab1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x2adaeaab9e00" loc="84:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x2adaeaab9e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab81a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab8330"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab84b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab8640"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab87c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaab8950"/>
        <function-ref name="set" scoped="" ref="0x2adaeaab8ad8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaab8c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x2adaeaace348" loc="95:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x2adaeaace348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaace698"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaace820"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaace9a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaceb30"/>
        <function-ref name="get" scoped="" ref="0x2adaeaacecb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaacee40"/>
        <function-ref name="set" scoped="" ref="0x2adaeaacd020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaacd1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x2adaeaa94c78" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x2adaeaa94c78"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa93020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa931a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa93330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa934b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa93640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa937c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa93950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa93ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x2adaeaa98e00" loc="53:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x2adaeaa98e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa971a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa97330"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa974b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa97640"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa977c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa97950"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa97ad8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa97c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x2adaeaabbaf0" loc="82:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x2adaeaabbaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaabbe40"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaba020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaba1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaba330"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaba4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaba640"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaba7c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaba950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x2adaeaaa51a0" loc="56:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x2adaeaaa51a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaa54f0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaa5678"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaa5800"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaa5988"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaa5b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaa5c98"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaa5e20"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaa4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x2adaeaaaa658" loc="67:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x2adaeaaaa658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaaa9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaaab30"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaaacb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaaae40"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaa9020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaa91a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaa9330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaa94b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x2adaeaaae658" loc="78:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x2adaeaaae658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaae9a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaaeb30"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaaecb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaaee40"/>
        <function-ref name="get" scoped="" ref="0x2adaeaabd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaabd1a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaabd330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaabd4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x2adaeaac5348" loc="87:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x2adaeaac5348"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaac5698"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaac5820"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaac59a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaac5b30"/>
        <function-ref name="get" scoped="" ref="0x2adaeaac5cb8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaac5e40"/>
        <function-ref name="set" scoped="" ref="0x2adaeaac4020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaac41a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x2adaeaa893f0" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x2adaeaa893f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa89740"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa898c8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa89a50"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa89bd8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa89d60"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa88020"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa881a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa88330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x2adaeaa8e4d0" loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x2adaeaa8e4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa8e820"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa8e9a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa8eb30"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa8ecb8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa8ee40"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa9d020"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa9d1a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa9d330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x2adaeaaa2658" loc="59:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x2adaeaaa2658"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaa29a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaa2b30"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaa2cb8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaa2e40"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaa1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaa11a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaa1330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaa14b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x2adaeaaa7af0" loc="70:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x2adaeaaa7af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaaa7e40"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaaa6020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaaa61a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaaa6330"/>
        <function-ref name="get" scoped="" ref="0x2adaeaaa64b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaaa6640"/>
        <function-ref name="set" scoped="" ref="0x2adaeaaa67c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaaa6950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x2adaeaabf020" loc="93:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x2adaeaabf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaabf370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaabf4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaabf680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaabf808"/>
        <function-ref name="get" scoped="" ref="0x2adaeaabf990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaabfb18"/>
        <function-ref name="set" scoped="" ref="0x2adaeaabfca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaabfe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x2adaeaab5e00" loc="73:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x2adaeaab5e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaab41a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaab4330"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaab44b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaab4640"/>
        <function-ref name="get" scoped="" ref="0x2adaeaab47c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaab4950"/>
        <function-ref name="set" scoped="" ref="0x2adaeaab4ad8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaab4c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x2adaeaa9faf0" loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x2adaeaa9faf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa9fe40"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa9e020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa9e1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa9e330"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa9e4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa9e640"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa9e7c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa9e950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x2adaeaa86968" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x2adaeaa86968"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa86cb8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa86e40"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa95020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa951a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa95330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa954b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa95640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa957c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x2adaeaa9baf0" loc="51:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x2adaeaa9baf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaa9be40"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaa99020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaa991a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaa99330"/>
        <function-ref name="get" scoped="" ref="0x2adaeaa994b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaa99640"/>
        <function-ref name="set" scoped="" ref="0x2adaeaa997c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaa99950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2adaeab06120" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2adaeab06120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab06470"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab065f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab06780"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab06908"/>
        <function-ref name="get" scoped="" ref="0x2adaeab06a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab06c18"/>
        <function-ref name="set" scoped="" ref="0x2adaeab06da0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab05020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2adaeab145b8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2adaeab145b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab14908"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab14a90"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab14c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab14da0"/>
        <function-ref name="get" scoped="" ref="0x2adaeab13020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab131a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab13330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab134b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2adaeab09dc0" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2adaeab09dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab08170"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab082f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab08480"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab08608"/>
        <function-ref name="get" scoped="" ref="0x2adaeab08790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab08918"/>
        <function-ref name="set" scoped="" ref="0x2adaeab08aa0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab08c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2adaeab052a8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2adaeab052a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab055f8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab05780"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab05908"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab05a90"/>
        <function-ref name="get" scoped="" ref="0x2adaeab05c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab05da0"/>
        <function-ref name="set" scoped="" ref="0x2adaeab15020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab151a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2adaeab13740" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2adaeab13740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab13a90"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab13c18"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab13da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab12020"/>
        <function-ref name="get" scoped="" ref="0x2adaeab121a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab12330"/>
        <function-ref name="set" scoped="" ref="0x2adaeab124b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab12640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2adaeab07020" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2adaeab07020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab07370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab074f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab07680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab07808"/>
        <function-ref name="get" scoped="" ref="0x2adaeab07990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab07b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeab07ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab07e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2adaeab15430" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2adaeab15430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab15780"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab15908"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab15a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab15c18"/>
        <function-ref name="get" scoped="" ref="0x2adaeab15da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab14020"/>
        <function-ref name="set" scoped="" ref="0x2adaeab141a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab14330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2adaeab128c8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2adaeab128c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab12c18"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab12da0"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab11020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab111a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab11330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab114b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab11640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab117c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb3cb020" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb3cb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb3cb370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb3cb4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb3cb680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb3cb808"/>
        <function-ref name="get" scoped="" ref="0x2adaeb3cb990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb3cbb18"/>
        <function-ref name="set" scoped="" ref="0x2adaeb3cbca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb3cbe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb3c8020" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb3c8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb3c8370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb3c84f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb3c8680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb3c8808"/>
        <function-ref name="get" scoped="" ref="0x2adaeb3c8990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb3c8b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeb3c8ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb3c8e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb3c5020" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb3c5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb3c5370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb3c54f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb3c5680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb3c5808"/>
        <function-ref name="get" scoped="" ref="0x2adaeb3c5990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb3c5b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeb3c5ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb3c5e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb3c2020" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb3c2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb3c2370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb3c24f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb3c2680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb3c2808"/>
        <function-ref name="get" scoped="" ref="0x2adaeb3c2990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb3c2b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeb3c2ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb3c2e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb3f5020" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb3f5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb3f5370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb3f54f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb3f5680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb3f5808"/>
        <function-ref name="get" scoped="" ref="0x2adaeb3f5990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb3f5b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeb3f5ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb3f5e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb3f2020" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb3f2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb3f2370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb3f24f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb3f2680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb3f2808"/>
        <function-ref name="get" scoped="" ref="0x2adaeb3f2990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb3f2b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeb3f2ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb3f2e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb3ef020" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb3ef020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb3ef370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb3ef4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb3ef680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb3ef808"/>
        <function-ref name="get" scoped="" ref="0x2adaeb3ef990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb3efb18"/>
        <function-ref name="set" scoped="" ref="0x2adaeb3efca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb3efe28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb3ec020" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb3ec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb3ec370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb3ec4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb3ec680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb3ec808"/>
        <function-ref name="get" scoped="" ref="0x2adaeb3ec990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb3ecb18"/>
        <function-ref name="set" scoped="" ref="0x2adaeb3ecca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb3ece28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2adaeab1bbd8" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2adaeab1bbd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab1a020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab1a1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab1a330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab1a4b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab1a640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab1a7c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab1a950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab1aad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2adaeab17020" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2adaeab17020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab17370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab174f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab17680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab17808"/>
        <function-ref name="get" scoped="" ref="0x2adaeab17990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab17b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeab17ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab17e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2adaeab1e930" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2adaeab1e930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab1ec80"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab1ee08"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab1c020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab1c1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab1c330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab1c4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab1c640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab1c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2adaeab1ad60" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2adaeab1ad60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab190d8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab19260"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab193e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab19570"/>
        <function-ref name="get" scoped="" ref="0x2adaeab196f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab19880"/>
        <function-ref name="set" scoped="" ref="0x2adaeab19a08"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab19b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2adaeab28120" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2adaeab28120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab28470"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab285f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab28780"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab28908"/>
        <function-ref name="get" scoped="" ref="0x2adaeab28a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab28c18"/>
        <function-ref name="set" scoped="" ref="0x2adaeab28da0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab27020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2adaeab1ca50" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2adaeab1ca50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab1cda0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab1b020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab1b1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab1b330"/>
        <function-ref name="get" scoped="" ref="0x2adaeab1b4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab1b640"/>
        <function-ref name="set" scoped="" ref="0x2adaeab1b7c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab1b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2adaeab19e18" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2adaeab19e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab181a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab18330"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab184b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab18640"/>
        <function-ref name="get" scoped="" ref="0x2adaeab187c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab18950"/>
        <function-ref name="set" scoped="" ref="0x2adaeab18ad8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab18c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2adaeab272a8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2adaeab272a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab275f8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab27780"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab27908"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab27a90"/>
        <function-ref name="get" scoped="" ref="0x2adaeab27c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab27da0"/>
        <function-ref name="set" scoped="" ref="0x2adaeab26020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab261a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb443448" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb443448"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb443798"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb443920"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb443aa8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb443c30"/>
        <function-ref name="get" scoped="" ref="0x2adaeb443db8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb442020"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4421a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb442330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb440480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb440480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4407d0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb440958"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb440ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb440c68"/>
        <function-ref name="get" scoped="" ref="0x2adaeb440df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb43f020"/>
        <function-ref name="set" scoped="" ref="0x2adaeb43f1a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb43f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb43d480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb43d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb43d7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb43d958"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb43dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb43dc68"/>
        <function-ref name="get" scoped="" ref="0x2adaeb43ddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb43c020"/>
        <function-ref name="set" scoped="" ref="0x2adaeb43c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb43c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb43a480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb43a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb43a7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb43a958"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb43aae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb43ac68"/>
        <function-ref name="get" scoped="" ref="0x2adaeb43adf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb439020"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4391a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb439330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb437480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb437480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4377d0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb437958"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb437ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb437c68"/>
        <function-ref name="get" scoped="" ref="0x2adaeb437df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb436020"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4361a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb436330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb434480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb434480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4347d0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb434958"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb434ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb434c68"/>
        <function-ref name="get" scoped="" ref="0x2adaeb434df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb433020"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4331a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb433330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb431480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb431480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4317d0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb431958"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb431ae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb431c68"/>
        <function-ref name="get" scoped="" ref="0x2adaeb431df0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb430020"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4301a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb430330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb42e480" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb42e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb42e7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb42e958"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb42eae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb42ec68"/>
        <function-ref name="get" scoped="" ref="0x2adaeb42edf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb464020"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4641a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb464330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2adaeab30740" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2adaeab30740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab30a90"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab30c18"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab30da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab2f020"/>
        <function-ref name="get" scoped="" ref="0x2adaeab2f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab2f330"/>
        <function-ref name="set" scoped="" ref="0x2adaeab2f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab2f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2adaeab2dbd8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2adaeab2dbd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab2c020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab2c1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab2c330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab2c4b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab2c640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab2c7c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab2c950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab2cad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2adaeab20500" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2adaeab20500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab20850"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab209d8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab20b60"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab20ce8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab20e70"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab31020"/>
        <function-ref name="set" scoped="" ref="0x2adaeab311a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab31330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2adaeab2f8c8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2adaeab2f8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab2fc18"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab2fda0"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab2e020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab2e1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab2e330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab2e4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab2e640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab2e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2adaeab2cd60" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2adaeab2cd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab2b0d8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab2b260"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab2b3e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab2b570"/>
        <function-ref name="get" scoped="" ref="0x2adaeab2b6f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab2b880"/>
        <function-ref name="set" scoped="" ref="0x2adaeab2ba08"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab2bb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2adaeab315b8" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2adaeab315b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab31908"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab31a90"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab31c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab31da0"/>
        <function-ref name="get" scoped="" ref="0x2adaeab30020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab301a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab30330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab304b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2adaeab2ea50" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2adaeab2ea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab2eda0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab2d020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab2d1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab2d330"/>
        <function-ref name="get" scoped="" ref="0x2adaeab2d4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab2d640"/>
        <function-ref name="set" scoped="" ref="0x2adaeab2d7c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab2d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2adaeab2be18" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2adaeab2be18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab2a1a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab2a330"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab2a4b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab2a640"/>
        <function-ref name="get" scoped="" ref="0x2adaeab2a7c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab2a950"/>
        <function-ref name="set" scoped="" ref="0x2adaeab2aad8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab2ac60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb48a6a8" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb48a6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb48a9f8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb48ab80"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb48ad08"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb489020"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4891a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb489330"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4894b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb489640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb487710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb487710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb487a60"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb487be8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb487d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb486020"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4861a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb486330"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4864b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb486640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb484710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb484710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb484a60"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb484be8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb484d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb483020"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4831a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb483330"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4834b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb483640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb481710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb481710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb481a60"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb481be8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb481d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb4b8020"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4b81a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb4b8330"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4b84b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb4b8640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb4b6710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb4b6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4b6a60"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb4b6be8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb4b6d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb4b5020"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4b51a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb4b5330"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4b54b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb4b5640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb4b3710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb4b3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4b3a60"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb4b3be8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb4b3d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb4b2020"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4b21a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb4b2330"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4b24b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb4b2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb4b0710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb4b0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4b0a60"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb4b0be8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb4b0d70"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb4af020"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4af1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb4af330"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4af4b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb4af640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb4ad710" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb4ad710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4ada60"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb4adbe8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb4add70"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb4ac020"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4ac1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb4ac330"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4ac4b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb4ac640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2adaeab33120" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2adaeab33120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab33470"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab335f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab33780"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab33908"/>
        <function-ref name="get" scoped="" ref="0x2adaeab33a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab33c18"/>
        <function-ref name="set" scoped="" ref="0x2adaeab33da0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab32020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2adaeab425b8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2adaeab425b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab42908"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab42a90"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab42c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab42da0"/>
        <function-ref name="get" scoped="" ref="0x2adaeab40020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab401a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab40330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab404b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2adaeab36e40" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2adaeab36e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab351c0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab35348"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab354d0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab35658"/>
        <function-ref name="get" scoped="" ref="0x2adaeab357e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab35968"/>
        <function-ref name="set" scoped="" ref="0x2adaeab35af0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab35c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2adaeab322a8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2adaeab322a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab325f8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab32780"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab32908"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab32a90"/>
        <function-ref name="get" scoped="" ref="0x2adaeab32c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab32da0"/>
        <function-ref name="set" scoped="" ref="0x2adaeab43020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab431a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2adaeab40740" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2adaeab40740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab40a90"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab40c18"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab40da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab3f020"/>
        <function-ref name="get" scoped="" ref="0x2adaeab3f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab3f330"/>
        <function-ref name="set" scoped="" ref="0x2adaeab3f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab3f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2adaeab34020" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2adaeab34020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab34370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab344f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab34680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab34808"/>
        <function-ref name="get" scoped="" ref="0x2adaeab34990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab34b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeab34ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab34e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2adaeab43430" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2adaeab43430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab43780"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab43908"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab43a90"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab43c18"/>
        <function-ref name="get" scoped="" ref="0x2adaeab43da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab42020"/>
        <function-ref name="set" scoped="" ref="0x2adaeab421a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab42330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2adaeab3f8c8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2adaeab3f8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab3fc18"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab3fda0"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab3e020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab3e1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab3e330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab3e4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab3e640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab3e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb50d970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb50d970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb50dcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb50de48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb50c020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb50c1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb50c330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb50c4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb50c640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb50c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb50a970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb50a970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb50acc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb50ae48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb509020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5091a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb509330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5094b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb509640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5097c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb507970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb507970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb507cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb507e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb506020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5061a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb506330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5064b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb506640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5067c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb504970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb504970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb504cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb504e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb503020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5031a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb503330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5034b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb503640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5037c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb501970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb501970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb501cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb501e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb500020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5001a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb500330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5004b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb500640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5007c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb4fe970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb4fe970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4fecc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb4fee48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb4fd020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb4fd1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4fd330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb4fd4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4fd640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb4fd7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb4fb970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb4fb970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4fbcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb4fbe48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb4fa020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb4fa1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4fa330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb4fa4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4fa640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb4fa7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb4f8970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb4f8970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb4f8cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb4f8e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb4f7020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb4f71a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb4f7330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb4f74b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb4f7640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb4f77c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2adaeab4abd8" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2adaeab4abd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab48020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab481a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab48330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab484b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab48640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab487c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab48950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab48ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2adaeab45020" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2adaeab45020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab45370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab454f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab45680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab45808"/>
        <function-ref name="get" scoped="" ref="0x2adaeab45990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab45b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeab45ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab45e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2adaeab4c930" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2adaeab4c930"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab4cc80"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab4ce08"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab4b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab4b1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab4b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab4b4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab4b640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab4b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2adaeab48d60" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2adaeab48d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab470d8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab47260"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab473e8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab47570"/>
        <function-ref name="get" scoped="" ref="0x2adaeab476f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab47880"/>
        <function-ref name="set" scoped="" ref="0x2adaeab47a08"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab47b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2adaeab44120" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2adaeab44120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab44470"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab445f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab44780"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab44908"/>
        <function-ref name="get" scoped="" ref="0x2adaeab44a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab44c18"/>
        <function-ref name="set" scoped="" ref="0x2adaeab44da0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab57020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2adaeab4ba50" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2adaeab4ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab4bda0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab4a020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab4a1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab4a330"/>
        <function-ref name="get" scoped="" ref="0x2adaeab4a4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab4a640"/>
        <function-ref name="set" scoped="" ref="0x2adaeab4a7c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab4a950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2adaeab47e18" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2adaeab47e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab461a8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab46330"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab464b8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab46640"/>
        <function-ref name="get" scoped="" ref="0x2adaeab467c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab46950"/>
        <function-ref name="set" scoped="" ref="0x2adaeab46ad8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab46c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2adaeab572a8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2adaeab572a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab575f8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab57780"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab57908"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab57a90"/>
        <function-ref name="get" scoped="" ref="0x2adaeab57c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab57da0"/>
        <function-ref name="set" scoped="" ref="0x2adaeab56020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab561a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb55c970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb55c970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb55ccc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb55ce48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb55b020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb55b1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb55b330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb55b4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb55b640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb55b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb559970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb559970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb559cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb559e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb558020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5581a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb558330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5584b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb558640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5587c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb556970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb556970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb556cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb556e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb555020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5551a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb555330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5554b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb555640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5557c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb553970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb553970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb553cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb553e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb552020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5521a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb552330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5524b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb552640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5527c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb550970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb550970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb550cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb550e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb54f020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb54f1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb54f330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb54f4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb54f640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb54f7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb54d970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb54d970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb54dcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb54de48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb54c020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb54c1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb54c330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb54c4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb54c640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb54c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb54a970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb54a970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb54acc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb54ae48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb549020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5491a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb549330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5494b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb549640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5497c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb583970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb583970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb583cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb583e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb582020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5821a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb582330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5824b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb582640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5827c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x2adaeab4e430" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x2adaeab4e430"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab4e780"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab4e908"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab4ea90"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab4ec18"/>
        <function-ref name="get" scoped="" ref="0x2adaeab4eda0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab61020"/>
        <function-ref name="set" scoped="" ref="0x2adaeab611a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab61330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x2adaeab5f8c8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x2adaeab5f8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab5fc18"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab5fda0"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab5e020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab5e1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab5e330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab5e4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab5e640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab5e7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x2adaeab501e8" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x2adaeab501e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab50538"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab506c0"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab50848"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab509d0"/>
        <function-ref name="get" scoped="" ref="0x2adaeab50b58"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab50ce0"/>
        <function-ref name="set" scoped="" ref="0x2adaeab50e68"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab4f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x2adaeab615b8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x2adaeab615b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab61908"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab61a90"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab61c18"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab61da0"/>
        <function-ref name="get" scoped="" ref="0x2adaeab60020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab601a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab60330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab604b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x2adaeab5ea50" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x2adaeab5ea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab5eda0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab5d020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab5d1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab5d330"/>
        <function-ref name="get" scoped="" ref="0x2adaeab5d4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab5d640"/>
        <function-ref name="set" scoped="" ref="0x2adaeab5d7c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab5d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x2adaeab4f2a8" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x2adaeab4f2a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab4f5f8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab4f780"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab4f908"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab4fa90"/>
        <function-ref name="get" scoped="" ref="0x2adaeab4fc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab4fda0"/>
        <function-ref name="set" scoped="" ref="0x2adaeab4e020"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab4e1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x2adaeab60740" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x2adaeab60740"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab60a90"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab60c18"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab60da0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab5f020"/>
        <function-ref name="get" scoped="" ref="0x2adaeab5f1a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab5f330"/>
        <function-ref name="set" scoped="" ref="0x2adaeab5f4b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab5f640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x2adaeab5dbd8" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x2adaeab5dbd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab5c020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab5c1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab5c330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab5c4b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab5c640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab5c7c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab5c950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab5cad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb5b3970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb5b3970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb5b3cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb5b3e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb5b1020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5b11a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb5b1330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5b14b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb5b1640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5b17c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb5af970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb5af970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb5afcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb5afe48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb5ae020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5ae1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb5ae330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5ae4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb5ae640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5ae7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb5ac970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb5ac970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb5accc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb5ace48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb5ab020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5ab1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb5ab330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5ab4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb5ab640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5ab7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb5a9970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb5a9970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb5a9cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb5a9e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb5a8020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5a81a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb5a8330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5a84b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb5a8640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5a87c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb5a6970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb5a6970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb5a6cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb5a6e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb5a5020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5a51a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb5a5330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5a54b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb5a5640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5a57c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb5e0970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb5e0970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb5e0cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb5e0e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb5df020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5df1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb5df330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5df4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb5df640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5df7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb5dd970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb5dd970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb5ddcc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb5dde48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb5dc020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5dc1a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb5dc330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5dc4b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb5dc640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5dc7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeb5da970" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeb5da970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeb5dacc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeb5dae48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeb5d9020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeb5d91a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb5d9330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeb5d94b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb5d9640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeb5d97c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab69a70" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab69a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab69dc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab7e020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab7e1a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab7e330"/>
        <function-ref name="get" scoped="" ref="0x2adaeab7e4b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab7e640"/>
        <function-ref name="set" scoped="" ref="0x2adaeab7e7c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab7e950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab7bdb8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab7bdb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab7a170"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab7a2f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab7a480"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab7a608"/>
        <function-ref name="get" scoped="" ref="0x2adaeab7a790"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab7a918"/>
        <function-ref name="set" scoped="" ref="0x2adaeab7aaa0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab7ac28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab893e0" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab893e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab89730"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab898b8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab89a40"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab89bc8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab89d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab88020"/>
        <function-ref name="set" scoped="" ref="0x2adaeab881a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab88330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab847e8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab847e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab84b38"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab84cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab84e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab83020"/>
        <function-ref name="get" scoped="" ref="0x2adaeab831a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab83330"/>
        <function-ref name="set" scoped="" ref="0x2adaeab834b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab83640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab80c38" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab80c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab93020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab931a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab93330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab934b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab93640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab937c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab93950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab93ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab8e020" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab8e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab8e370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab8e4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab8e680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab8e808"/>
        <function-ref name="get" scoped="" ref="0x2adaeab8e990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab8eb18"/>
        <function-ref name="set" scoped="" ref="0x2adaeab8eca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab8ee28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab9d480" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab9d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab9d7d0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab9d958"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab9dae0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab9dc68"/>
        <function-ref name="get" scoped="" ref="0x2adaeab9ddf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab9c020"/>
        <function-ref name="set" scoped="" ref="0x2adaeab9c1a8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab9c330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab997e8" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab997e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab99b38"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab99cc0"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab99e48"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab98020"/>
        <function-ref name="get" scoped="" ref="0x2adaeab981a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab98330"/>
        <function-ref name="set" scoped="" ref="0x2adaeab984b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab98640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab94970" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab94970"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab94cc0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab94e48"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaba7020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaba71a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeaba7330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaba74b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeaba7640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaba77c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeaba3ab0" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeaba3ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaba3e00"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaba2020"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaba21a8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaba2330"/>
        <function-ref name="get" scoped="" ref="0x2adaeaba24b8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaba2640"/>
        <function-ref name="set" scoped="" ref="0x2adaeaba27c8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeaba2950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeab9fc38" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeab9fc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeab9e020"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeab9e1a8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeab9e330"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeab9e4b8"/>
        <function-ref name="get" scoped="" ref="0x2adaeab9e640"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeab9e7c8"/>
        <function-ref name="set" scoped="" ref="0x2adaeab9e950"/>
        <function-ref name="clr" scoped="" ref="0x2adaeab9ead8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeabad020" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeabad020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeabad370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeabad4f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeabad680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeabad808"/>
        <function-ref name="get" scoped="" ref="0x2adaeabad990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeabadb18"/>
        <function-ref name="set" scoped="" ref="0x2adaeabadca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeabade28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x2adaeaba8180" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x2adaeaba8180"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeaba84d0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeaba8658"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeaba87e0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeaba8968"/>
        <function-ref name="get" scoped="" ref="0x2adaeaba8af0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeaba8c78"/>
        <function-ref name="set" scoped="" ref="0x2adaeaba8e00"/>
        <function-ref name="clr" scoped="" ref="0x2adaeabbb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeabe60d8" loc="27:/opt/tinyos-2.0.2/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeabe60d8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x2adaea8dc0b8"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x2adaea8dc0b8"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeabe6428"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x2adaeabe6708" loc="28:/opt/tinyos-2.0.2/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2adaeabe6708"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2adaeabe6a58"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2adaeabe6be0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2adaeabe6d68"/>
        <function-ref name="actualMicro" scoped="" ref="0x2adaeabfb020"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2adaeabfb1a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x2adaeac07a60" loc="49:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x2adaeac07a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeac07db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x2adaeac08280" loc="46:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2adaeac08280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2adaeac085d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x2adaeac07398" loc="48:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x2adaeac07398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeac076e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x2adaeac088b8" loc="47:/opt/tinyos-2.0.2/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2adaeac088b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeac08c08"/>
        <function-ref name="taskLoop" scoped="" ref="0x2adaeac08d90"/>
        <function-ref name="runNextTask" scoped="" ref="0x2adaeac07020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2adaea8eebe8" loc="37:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2adaea8eebe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaea8e4020"/>
        <function-ref name="runTask" scoped="" ref="0x2adaea8e41a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2adaea8e15c8" loc="36:/opt/tinyos-2.0.2/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2adaea8e15c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea8e1918"/>
        <function-ref name="taskLoop" scoped="" ref="0x2adaea8e1aa0"/>
        <function-ref name="runNextTask" scoped="" ref="0x2adaea8e1c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x2adaea98de58" loc="45:/opt/tinyos-2.0.2/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x2adaea98de58"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaea98c1e8"/>
        <function-ref name="runTask" scoped="" ref="0x2adaea98c370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x2adaea994328" loc="46:/opt/tinyos-2.0.2/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2adaea994328"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2adaea994678"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x2adaea98d020" loc="44:/opt/tinyos-2.0.2/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x2adaea98d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaea98d370"/>
        <function-ref name="taskLoop" scoped="" ref="0x2adaea98d4f8"/>
        <function-ref name="runNextTask" scoped="" ref="0x2adaea98d680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x2adaea9b3c10" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2adaea9b3c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2adaea9ab020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x2adaea9ac020" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x2adaea9ac020"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x2adaea9ac370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x2adaea9b4480" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2adaea9b4480"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2adaea9b47d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0" ref="0x2adaeac1ec08" loc="36:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer0" scoped="" ref="0x2adaeac1ec08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeac1de78"/>
        <function-ref name="fired" scoped="" ref="0x2adaeac275a8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2adaeac1d2d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2adaeac27e48"/>
        <function-ref name="getdt" scoped="" ref="0x2adaeac32748"/>
        <function-ref name="gett0" scoped="" ref="0x2adaeac322f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeac279f8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2adaeac127e8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2adaeac1d8a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2adaeac12c88"/>
        <function-ref name="stop" scoped="" ref="0x2adaeac27158"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x2adaeac3a060" loc="40:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMControl" scoped="" ref="0x2adaeac3a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2adaeac3a3b0"/>
        <function-ref name="stopDone" scoped="" ref="0x2adaeac3a538"/>
        <function-ref name="start" scoped="" ref="0x2adaeac3a6c0"/>
        <function-ref name="stop" scoped="" ref="0x2adaeac3a848"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x2adaeac308b8" loc="38:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x2adaeac308b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x2adaeac30c08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x2adaeac35020" loc="42:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2adaeac35020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2adaeac35370"/>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeac354f8"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeac35680"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeac35808"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2adaeac35990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AttestationRequestSend" ref="0x2adaeac64588" loc="43:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AttestationRequestSend" scoped="" ref="0x2adaeac64588"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeac648d8"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeac64a60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeac64be8"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeac64d70"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeac6b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x2adaeac3b330" loc="37:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2adaeac3b330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2adaeac3b680"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2adaeac3b808"/>
        <function-ref name="led1On" scoped="" ref="0x2adaeac3b990"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2adaeac3bb18"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2adaeac3bca0"/>
        <function-ref name="get" scoped="" ref="0x2adaeac3be28"/>
        <function-ref name="led1Off" scoped="" ref="0x2adaeac30020"/>
        <function-ref name="led2Off" scoped="" ref="0x2adaeac30640"/>
        <function-ref name="set" scoped="" ref="0x2adaeac301a8"/>
        <function-ref name="led0On" scoped="" ref="0x2adaeac30330"/>
        <function-ref name="led2On" scoped="" ref="0x2adaeac304b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x2adaeac5a5d0" loc="41:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2adaeac5a5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2adaeac5a920"/>
        <function-ref name="source" scoped="" ref="0x2adaeac5aaa8"/>
        <function-ref name="address" scoped="" ref="0x2adaeac5ac30"/>
        <function-ref name="destination" scoped="" ref="0x2adaeac5adb8"/>
        <function-ref name="setSource" scoped="" ref="0x2adaeac39020"/>
        <function-ref name="setDestination" scoped="" ref="0x2adaeac391a8"/>
        <function-ref name="type" scoped="" ref="0x2adaeac39330"/>
        <function-ref name="setType" scoped="" ref="0x2adaeac394b8"/>
        <function-ref name="isForMe" scoped="" ref="0x2adaeac39640"/>
        <function-ref name="setGroup" scoped="" ref="0x2adaeac397c8"/>
        <function-ref name="localGroup" scoped="" ref="0x2adaeac39950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AttestationResponseReceive" ref="0x2adaeac777a8" loc="44:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AttestationResponseReceive" scoped="" ref="0x2adaeac777a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeac77af8"/>
        <function-ref name="receive" scoped="" ref="0x2adaeac77c80"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeac77e08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x2adaeac79190" loc="35:/opt/tinyos-2.0.2/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2adaeac79190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2adaeac794e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2adaeac79668"/>
        <function-ref name="led1On" scoped="" ref="0x2adaeac797f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2adaeac79978"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2adaeac79b00"/>
        <function-ref name="get" scoped="" ref="0x2adaeac79c88"/>
        <function-ref name="led1Off" scoped="" ref="0x2adaeac79e10"/>
        <function-ref name="led2Off" scoped="" ref="0x2adaeac904b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeac90020"/>
        <function-ref name="led0On" scoped="" ref="0x2adaeac901a8"/>
        <function-ref name="led2On" scoped="" ref="0x2adaeac90330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x2adaeac8cce8" loc="39:/opt/tinyos-2.0.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x2adaeac8cce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeac8b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeac8b228"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeac8b3b0"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeac8b538"/>
        <function-ref name="get" scoped="" ref="0x2adaeac8b6c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeac8b848"/>
        <function-ref name="set" scoped="" ref="0x2adaeac8b9d0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeac8bb58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeac8d020" loc="35:/opt/tinyos-2.0.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeac8d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeac8d370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x2adaeac8be70" loc="40:/opt/tinyos-2.0.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x2adaeac8be70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeac8a1e8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeac8a370"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeac8a4f8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeac8a680"/>
        <function-ref name="get" scoped="" ref="0x2adaeac8a808"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeac8a990"/>
        <function-ref name="set" scoped="" ref="0x2adaeac8ab18"/>
        <function-ref name="clr" scoped="" ref="0x2adaeac8aca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x2adaeac8d5e8" loc="36:/opt/tinyos-2.0.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2adaeac8d5e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2adaeac8d938"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2adaeac8dac0"/>
        <function-ref name="led1On" scoped="" ref="0x2adaeac8dc48"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2adaeac8ddd0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2adaeac8c020"/>
        <function-ref name="get" scoped="" ref="0x2adaeac8c1a8"/>
        <function-ref name="led1Off" scoped="" ref="0x2adaeac8c330"/>
        <function-ref name="led2Off" scoped="" ref="0x2adaeac8c950"/>
        <function-ref name="set" scoped="" ref="0x2adaeac8c4b8"/>
        <function-ref name="led0On" scoped="" ref="0x2adaeac8c640"/>
        <function-ref name="led2On" scoped="" ref="0x2adaeac8c7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x2adaeac89020" loc="41:/opt/tinyos-2.0.2/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x2adaeac89020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeac89370"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeac894f8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeac89680"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeac89808"/>
        <function-ref name="get" scoped="" ref="0x2adaeac89990"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeac89b18"/>
        <function-ref name="set" scoped="" ref="0x2adaeac89ca0"/>
        <function-ref name="clr" scoped="" ref="0x2adaeac89e28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x2adaeac8e548" loc="35:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x2adaeac8e548"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeac8e898"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeac8ea20"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeac8eba8"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeac8ed30"/>
        <function-ref name="get" scoped="" ref="0x2adaeac9d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeac9d1a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeac9d330"/>
        <function-ref name="clr" scoped="" ref="0x2adaeac9d4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x2adaeac9d810" loc="36:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x2adaeac9d810"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeac9db60"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeac9dce8"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeac9de70"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeacb4020"/>
        <function-ref name="get" scoped="" ref="0x2adaeacb41a8"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeacb4330"/>
        <function-ref name="set" scoped="" ref="0x2adaeacb44b8"/>
        <function-ref name="clr" scoped="" ref="0x2adaeacb4640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x2adaeacb3a80" loc="38:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeacb3a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeacb3dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x2adaeacb4998" loc="37:/opt/tinyos-2.0.2/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x2adaeacb4998"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x2adaeacb4ce8"/>
        <function-ref name="isInput" scoped="" ref="0x2adaeacb4e70"/>
        <function-ref name="toggle" scoped="" ref="0x2adaeacb3020"/>
        <function-ref name="isOutput" scoped="" ref="0x2adaeacb31a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeacb3330"/>
        <function-ref name="makeOutput" scoped="" ref="0x2adaeacb34b8"/>
        <function-ref name="set" scoped="" ref="0x2adaeacb3640"/>
        <function-ref name="clr" scoped="" ref="0x2adaeacb37c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2adaeae76128" loc="37:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
      <component-ref qname="BlinkAppC.Timer0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2adaeae76128"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeae725f0"/>
        <function-ref name="fired" scoped="" ref="0x2adaeae75a48"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2adaeae748c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2adaeae74470"/>
        <function-ref name="getdt" scoped="" ref="0x2adaeae71020"/>
        <function-ref name="gett0" scoped="" ref="0x2adaeae72a40"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeae74020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2adaeae76c70"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2adaeae72020"/>
        <function-ref name="startOneShot" scoped="" ref="0x2adaeae75158"/>
        <function-ref name="stop" scoped="" ref="0x2adaeae755f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2adaeacbee28" loc="38:/opt/tinyos-2.0.2/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2adaeacbee28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeacb70c0"/>
        <function-ref name="fired" scoped="" ref="0x2adaeacba798"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2adaeacb84d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2adaeacb8088"/>
        <function-ref name="getdt" scoped="" ref="0x2adaeacb7960"/>
        <function-ref name="gett0" scoped="" ref="0x2adaeacb7510"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeacbabe8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2adaeacbb9e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2adaeacb8aa8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2adaeacbbe80"/>
        <function-ref name="stop" scoped="" ref="0x2adaeacba348"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x2adaeaccb4a0" loc="35:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x2adaeaccb4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeacc76c8"/>
        <function-ref name="fired" scoped="" ref="0x2adaeaccadb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2adaeacc9ad8"/>
        <function-ref name="isOneShot" scoped="" ref="0x2adaeacc9688"/>
        <function-ref name="getdt" scoped="" ref="0x2adaeacc6020"/>
        <function-ref name="gett0" scoped="" ref="0x2adaeacc7b18"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeacc9238"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2adaeacca020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2adaeacc70f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x2adaeacca4c0"/>
        <function-ref name="stop" scoped="" ref="0x2adaeacca960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2adaeacc1980" loc="36:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2adaeacc1980"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2adaeacc4560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeacb5758" loc="34:/opt/tinyos-2.0.2/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeacb5758"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeacb5aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x2adaeace2e40" loc="29:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x2adaeace2e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2adaeace7be8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2adaeace6548"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2adaeace60c0"/>
        <function-ref name="overflow" scoped="" ref="0x2adaeace69d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeacd8020" loc="27:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeacd8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeacd8370"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x2adaeacd0838" loc="28:/opt/tinyos-2.0.2/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x2adaeacd0838"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeacce020"/>
        <function-ref name="fired" scoped="" ref="0x2adaeaccf020"/>
        <function-ref name="startAt" scoped="" ref="0x2adaeaccf930"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeaccf4a8"/>
        <function-ref name="getAlarm" scoped="" ref="0x2adaeacce4a8"/>
        <function-ref name="start" scoped="" ref="0x2adaeacd75e0"/>
        <function-ref name="stop" scoped="" ref="0x2adaeacd7ab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2adaeaddd998" loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2adaeaddd998"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeadd9020"/>
        <function-ref name="fired" scoped="" ref="0x2adaeadda0c0"/>
        <function-ref name="startAt" scoped="" ref="0x2adaeadda9d0"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeadda548"/>
        <function-ref name="getAlarm" scoped="" ref="0x2adaeadd94a8"/>
        <function-ref name="start" scoped="" ref="0x2adaeaddb730"/>
        <function-ref name="stop" scoped="" ref="0x2adaeaddbc08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeaddd1f0" loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeaddd1f0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x2adaea8ddd18"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x2adaea8ddd18"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeaddd540"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2adaeadd9a90" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2adaeadd9a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2adaeadd8828"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2adaeadd6190"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2adaeadd8cb0"/>
        <function-ref name="overflow" scoped="" ref="0x2adaeadd6618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x2adaeb69c978" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2adaeb69c978"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2adaeb69ccc8"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2adaeb69ce50"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2adaeb69b020"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2adaeb69b1a8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2adaeb69b330"/>
        <function-ref name="setControl" scoped="" ref="0x2adaeb69b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x2adaeb65f4f8" loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2adaeb65f4f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeb6a5c88"/>
        <function-ref name="fired" scoped="" ref="0x2adaeb6a6d08"/>
        <function-ref name="startAt" scoped="" ref="0x2adaeb6a5680"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeb6a51f8"/>
        <function-ref name="getAlarm" scoped="" ref="0x2adaeb6a4150"/>
        <function-ref name="start" scoped="" ref="0x2adaeb6a63a8"/>
        <function-ref name="stop" scoped="" ref="0x2adaeb6a6880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeb660ce8" loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeb660ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb65f0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x2adaeb6a4738" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2adaeb6a4738"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2adaeb6a3578"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2adaeb6a1020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2adaeb6a3a00"/>
        <function-ref name="overflow" scoped="" ref="0x2adaeb6a14a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x2adaeb6978c0" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x2adaeb6978c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x2adaeb697c10"/>
        <function-ref name="compareBusy" scoped="" ref="0x2adaeb697d98"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x2adaeb696020"/>
        <function-ref name="countBusy" scoped="" ref="0x2adaeb6961a8"/>
        <function-ref name="getAssr" scoped="" ref="0x2adaeb696330"/>
        <function-ref name="setAssr" scoped="" ref="0x2adaeb6964b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x2adaeb69b848" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2adaeb69b848"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2adaeb697020"/>
        <function-ref name="fired" scoped="" ref="0x2adaeb69ad70"/>
        <function-ref name="get" scoped="" ref="0x2adaeb69a410"/>
        <function-ref name="reset" scoped="" ref="0x2adaeb699230"/>
        <function-ref name="isOn" scoped="" ref="0x2adaeb6974a8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb69a898"/>
        <function-ref name="start" scoped="" ref="0x2adaeb6996b8"/>
        <function-ref name="stop" scoped="" ref="0x2adaeb699b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x2adaeb6a1a28" loc="30:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2adaeb6a1a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2adaeb69eb80"/>
        <function-ref name="test" scoped="" ref="0x2adaeb69e270"/>
        <function-ref name="get" scoped="" ref="0x2adaeb6a05d8"/>
        <function-ref name="setScale" scoped="" ref="0x2adaeb69c088"/>
        <function-ref name="getScale" scoped="" ref="0x2adaeb69c560"/>
        <function-ref name="reset" scoped="" ref="0x2adaeb69f4a8"/>
        <function-ref name="overflow" scoped="" ref="0x2adaeb69f020"/>
        <function-ref name="isOn" scoped="" ref="0x2adaeb69e6f8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb6a0a60"/>
        <function-ref name="start" scoped="" ref="0x2adaeb69f930"/>
        <function-ref name="stop" scoped="" ref="0x2adaeb69fdb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2adaead69020" loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2adaead69020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2adaead69370"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2adaead694f8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2adaead69680"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2adaead69808"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2adaead69990"/>
        <function-ref name="setControl" scoped="" ref="0x2adaead69b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x2adaead64228" loc="50:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x2adaead64228"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x2adaead64578"/>
        <function-ref name="compareBusy" scoped="" ref="0x2adaead64700"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x2adaead64888"/>
        <function-ref name="countBusy" scoped="" ref="0x2adaead64a10"/>
        <function-ref name="getAssr" scoped="" ref="0x2adaead64b98"/>
        <function-ref name="setAssr" scoped="" ref="0x2adaead64d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2adaead68020" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2adaead68020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2adaead657a8"/>
        <function-ref name="fired" scoped="" ref="0x2adaead67560"/>
        <function-ref name="get" scoped="" ref="0x2adaead68ba0"/>
        <function-ref name="reset" scoped="" ref="0x2adaead679e8"/>
        <function-ref name="isOn" scoped="" ref="0x2adaead65c30"/>
        <function-ref name="set" scoped="" ref="0x2adaead67088"/>
        <function-ref name="start" scoped="" ref="0x2adaead67e70"/>
        <function-ref name="stop" scoped="" ref="0x2adaead65320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2adaead55de8" loc="47:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2adaead55de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2adaead6a0f8"/>
        <function-ref name="test" scoped="" ref="0x2adaead6b798"/>
        <function-ref name="get" scoped="" ref="0x2adaead52a18"/>
        <function-ref name="setScale" scoped="" ref="0x2adaead6a580"/>
        <function-ref name="getScale" scoped="" ref="0x2adaead6aa58"/>
        <function-ref name="reset" scoped="" ref="0x2adaead51980"/>
        <function-ref name="overflow" scoped="" ref="0x2adaead514f8"/>
        <function-ref name="isOn" scoped="" ref="0x2adaead6bc20"/>
        <function-ref name="set" scoped="" ref="0x2adaead51020"/>
        <function-ref name="start" scoped="" ref="0x2adaead51e08"/>
        <function-ref name="stop" scoped="" ref="0x2adaead6b310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x2adaead78d20" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x2adaead78d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x2adaead770a0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x2adaead77228"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x2adaead773b0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x2adaead77538"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x2adaead776c0"/>
        <function-ref name="setControl" scoped="" ref="0x2adaead77848"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x2adaead73e18" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x2adaead73e18"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x2adaead721a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x2adaead72558" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x2adaead72558"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x2adaead728a8"/>
        <function-ref name="compareBusy" scoped="" ref="0x2adaead72a30"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x2adaead72bb8"/>
        <function-ref name="countBusy" scoped="" ref="0x2adaead72d40"/>
        <function-ref name="getAssr" scoped="" ref="0x2adaead71020"/>
        <function-ref name="setAssr" scoped="" ref="0x2adaead711a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x2adaead77d10" loc="42:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x2adaead77d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x2adaead73510"/>
        <function-ref name="fired" scoped="" ref="0x2adaead742b0"/>
        <function-ref name="get" scoped="" ref="0x2adaead768f0"/>
        <function-ref name="reset" scoped="" ref="0x2adaead74738"/>
        <function-ref name="isOn" scoped="" ref="0x2adaead73998"/>
        <function-ref name="set" scoped="" ref="0x2adaead76d78"/>
        <function-ref name="start" scoped="" ref="0x2adaead74bc0"/>
        <function-ref name="stop" scoped="" ref="0x2adaead73088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2adaead63cf8" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2adaead63cf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x2adaead79e20"/>
        <function-ref name="test" scoped="" ref="0x2adaead79510"/>
        <function-ref name="get" scoped="" ref="0x2adaead608f0"/>
        <function-ref name="setScale" scoped="" ref="0x2adaead78310"/>
        <function-ref name="getScale" scoped="" ref="0x2adaead787e8"/>
        <function-ref name="reset" scoped="" ref="0x2adaead7a738"/>
        <function-ref name="overflow" scoped="" ref="0x2adaead7a2b0"/>
        <function-ref name="isOn" scoped="" ref="0x2adaead79998"/>
        <function-ref name="set" scoped="" ref="0x2adaead60d78"/>
        <function-ref name="start" scoped="" ref="0x2adaead7abc0"/>
        <function-ref name="stop" scoped="" ref="0x2adaead79088"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x2adaeae01cf0" loc="63:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x2adaeae01cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeae000a0"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeae00228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x2adaeae05c70" loc="38:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x2adaeae05c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeae01410"/>
        <function-ref name="fired" scoped="" ref="0x2adaeae024a8"/>
        <function-ref name="startAt" scoped="" ref="0x2adaeae02db8"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeae02930"/>
        <function-ref name="getAlarm" scoped="" ref="0x2adaeae01898"/>
        <function-ref name="start" scoped="" ref="0x2adaeae039f0"/>
        <function-ref name="stop" scoped="" ref="0x2adaeae02020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2adaeae0aab0" loc="37:/opt/tinyos-2.0.2/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2adaeae0aab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeae06d60"/>
        <function-ref name="fired" scoped="" ref="0x2adaeae07470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2adaeae061c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2adaeae07d10"/>
        <function-ref name="getdt" scoped="" ref="0x2adaeae05648"/>
        <function-ref name="gett0" scoped="" ref="0x2adaeae051f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeae078c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2adaeae09620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2adaeae06790"/>
        <function-ref name="startOneShot" scoped="" ref="0x2adaeae09ac0"/>
        <function-ref name="stop" scoped="" ref="0x2adaeae07020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x2adaeae4a618" loc="60:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x2adaeae4a618"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeae4a968"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeae4aaf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x2adaeae4f5a0" loc="38:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x2adaeae4f5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeae4b8f0"/>
        <function-ref name="fired" scoped="" ref="0x2adaeae4c020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2adaeae4cd10"/>
        <function-ref name="isOneShot" scoped="" ref="0x2adaeae4c8c0"/>
        <function-ref name="getdt" scoped="" ref="0x2adaeae4a1c0"/>
        <function-ref name="gett0" scoped="" ref="0x2adaeae4bd40"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeae4c470"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2adaeae4d118"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2adaeae4b320"/>
        <function-ref name="startOneShot" scoped="" ref="0x2adaeae4d5b8"/>
        <function-ref name="stop" scoped="" ref="0x2adaeae4da58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2adaeae550c8" loc="37:/opt/tinyos-2.0.2/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2adaeae550c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeae50610"/>
        <function-ref name="fired" scoped="" ref="0x2adaeae53a48"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2adaeae52900"/>
        <function-ref name="isOneShot" scoped="" ref="0x2adaeae52490"/>
        <function-ref name="getdt" scoped="" ref="0x2adaeae4f020"/>
        <function-ref name="gett0" scoped="" ref="0x2adaeae50a80"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeae52020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2adaeae55c30"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2adaeae50020"/>
        <function-ref name="startOneShot" scoped="" ref="0x2adaeae53118"/>
        <function-ref name="stop" scoped="" ref="0x2adaeae535d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x2adaeae667f8" loc="37:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x2adaeae667f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2adaeae5d3a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x2adaeae5d9d0" loc="38:/opt/tinyos-2.0.2/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x2adaeae5d9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2adaeae5c768"/>
        <function-ref name="clearOverflow" scoped="" ref="0x2adaeae5b0c0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x2adaeae5cbf0"/>
        <function-ref name="overflow" scoped="" ref="0x2adaeae5b548"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x2adaeae70db8" loc="48:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x2adaeae70db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2adaeae6d170"/>
        <function-ref name="stopDone" scoped="" ref="0x2adaeae6d2f8"/>
        <function-ref name="start" scoped="" ref="0x2adaeae6d480"/>
        <function-ref name="stop" scoped="" ref="0x2adaeae6d608"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2adaeae6dd80" loc="50:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2adaeae6dd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeae6c170"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae6c2f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeae6c480"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeae6c608"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeae6c790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x2adaeae6be78" loc="52:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x2adaeae6be78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae691f8"/>
        <function-ref name="receive" scoped="" ref="0x2adaeae69380"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae69508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2adaeae69790" loc="54:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2adaeae69790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2adaeae69ae0"/>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae69c68"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae69df0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeae68020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2adaeae681a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2adaeae6b020" loc="51:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2adaeae6b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae6b370"/>
        <function-ref name="receive" scoped="" ref="0x2adaeae6b4f8"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae6b680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x2adaeae82470" loc="56:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeae82470"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2adaeae827c0"/>
        <function-ref name="noAck" scoped="" ref="0x2adaeae82948"/>
        <function-ref name="wasAcked" scoped="" ref="0x2adaeae82ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2adaeae68448" loc="55:/opt/tinyos-2.0.2/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2adaeae68448"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2adaeae68798"/>
        <function-ref name="source" scoped="" ref="0x2adaeae68920"/>
        <function-ref name="address" scoped="" ref="0x2adaeae68aa8"/>
        <function-ref name="destination" scoped="" ref="0x2adaeae68c30"/>
        <function-ref name="setSource" scoped="" ref="0x2adaeae68db8"/>
        <function-ref name="setDestination" scoped="" ref="0x2adaeae87020"/>
        <function-ref name="type" scoped="" ref="0x2adaeae871a8"/>
        <function-ref name="setType" scoped="" ref="0x2adaeae87330"/>
        <function-ref name="isForMe" scoped="" ref="0x2adaeae874b8"/>
        <function-ref name="setGroup" scoped="" ref="0x2adaeae87640"/>
        <function-ref name="localGroup" scoped="" ref="0x2adaeae877c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x2adaeae86918" loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x2adaeae86918"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2adaeae86c68"/>
        <function-ref name="stopDone" scoped="" ref="0x2adaeae86df0"/>
        <function-ref name="start" scoped="" ref="0x2adaeae80020"/>
        <function-ref name="stop" scoped="" ref="0x2adaeae801a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2adaeae80920" loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2adaeae80920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeae80c70"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae80df8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeae7e020"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeae7e1a8"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeae7e330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x2adaeae7d9a0" loc="49:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x2adaeae7d9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae7dcf0"/>
        <function-ref name="receive" scoped="" ref="0x2adaeae7de78"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae7c030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2adaeae7b8c8" loc="51:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2adaeae7b8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2adaeae7bc18"/>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae7bda0"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae7a020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeae7a1a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2adaeae7a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2adaeae7eab0" loc="48:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2adaeae7eab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae7ee00"/>
        <function-ref name="receive" scoped="" ref="0x2adaeae7d020"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae7d1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x2adaeae7a658" loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeae7a658"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2adaeae7a9a8"/>
        <function-ref name="noAck" scoped="" ref="0x2adaeae7ab30"/>
        <function-ref name="wasAcked" scoped="" ref="0x2adaeae7acb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2adaeae7c2d0" loc="50:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2adaeae7c2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2adaeae7c620"/>
        <function-ref name="source" scoped="" ref="0x2adaeae7c7a8"/>
        <function-ref name="address" scoped="" ref="0x2adaeae7c930"/>
        <function-ref name="destination" scoped="" ref="0x2adaeae7cab8"/>
        <function-ref name="setSource" scoped="" ref="0x2adaeae7cc40"/>
        <function-ref name="setDestination" scoped="" ref="0x2adaeae7cdc8"/>
        <function-ref name="type" scoped="" ref="0x2adaeae7b020"/>
        <function-ref name="setType" scoped="" ref="0x2adaeae7b1a8"/>
        <function-ref name="isForMe" scoped="" ref="0x2adaeae7b330"/>
        <function-ref name="setGroup" scoped="" ref="0x2adaeae7b4b8"/>
        <function-ref name="localGroup" scoped="" ref="0x2adaeae7b640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x2adaeae8a330" loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x2adaeae8a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeae8a680"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae8a808"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeae8a990"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeae8ab18"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeae8aca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x2adaeae90020" loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x2adaeae90020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae90370"/>
        <function-ref name="receive" scoped="" ref="0x2adaeae904f8"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae90680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2adaeae79e58" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2adaeae79e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeae961e8"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae96370"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeae964f8"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeae96680"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeae96808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x2adaeae94e78" loc="42:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x2adaeae94e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae931f8"/>
        <function-ref name="receive" scoped="" ref="0x2adaeae93380"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae93508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x2adaeae90988" loc="48:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2adaeae90988"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2adaeae90cd8"/>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae90e60"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae8f020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeae8f1a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2adaeae8f330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2adaeae94020" loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2adaeae94020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeae94370"/>
        <function-ref name="receive" scoped="" ref="0x2adaeae944f8"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeae94680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2adaeae937a8" loc="43:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2adaeae937a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2adaeae93af8"/>
        <function-ref name="source" scoped="" ref="0x2adaeae93c80"/>
        <function-ref name="address" scoped="" ref="0x2adaeae93e08"/>
        <function-ref name="destination" scoped="" ref="0x2adaeae92020"/>
        <function-ref name="setSource" scoped="" ref="0x2adaeae921a8"/>
        <function-ref name="setDestination" scoped="" ref="0x2adaeae92330"/>
        <function-ref name="type" scoped="" ref="0x2adaeae924b8"/>
        <function-ref name="setType" scoped="" ref="0x2adaeae92640"/>
        <function-ref name="isForMe" scoped="" ref="0x2adaeae927c8"/>
        <function-ref name="setGroup" scoped="" ref="0x2adaeae92950"/>
        <function-ref name="localGroup" scoped="" ref="0x2adaeae92ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x2adaeae97c18" loc="54:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x2adaeae97c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2adaeaee5020"/>
        <function-ref name="stopDone" scoped="" ref="0x2adaeaee51a8"/>
        <function-ref name="start" scoped="" ref="0x2adaeaee5330"/>
        <function-ref name="stop" scoped="" ref="0x2adaeaee54b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2adaeaee4d20" loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2adaeaee4d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2adaeaee30a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeaee3228"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeaee33b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeaee3538"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2adaeaee36c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x2adaeaee5730" loc="55:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2adaeaee5730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeaee5a80"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeaee5c08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeaee5d90"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeaee4020"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeaee41a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x2adaeaef0260" loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x2adaeaef0260"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="getLocalSleepInterval" scoped="" ref="0x2adaeaef05b0"/>
        <function-ref name="getRxDutyCycle" scoped="" ref="0x2adaeaef0738"/>
        <function-ref name="sleepIntervalToDutyCycle" scoped="" ref="0x2adaeaef08c0"/>
        <function-ref name="getLocalDutyCycle" scoped="" ref="0x2adaeaef0a48"/>
        <function-ref name="setRxSleepInterval" scoped="" ref="0x2adaeaef0bd0"/>
        <function-ref name="setLocalDutyCycle" scoped="" ref="0x2adaeaef0d58"/>
        <function-ref name="setRxDutyCycle" scoped="" ref="0x2adaeaede020"/>
        <function-ref name="dutyCycleToSleepInterval" scoped="" ref="0x2adaeaede1a8"/>
        <function-ref name="getRxSleepInterval" scoped="" ref="0x2adaeaede330"/>
        <function-ref name="setLocalSleepInterval" scoped="" ref="0x2adaeaede4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x2adaeaee0de0" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x2adaeaee0de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x2adaeaee2170"/>
        <function-ref name="enableCca" scoped="" ref="0x2adaeaee22f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2adaeaee4438" loc="56:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2adaeaee4438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeaee4788"/>
        <function-ref name="receive" scoped="" ref="0x2adaeaee4910"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeaee4a98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x2adaeaee1080" loc="62:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeaee1080"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2adaeaee13d0"/>
        <function-ref name="noAck" scoped="" ref="0x2adaeaee1558"/>
        <function-ref name="wasAcked" scoped="" ref="0x2adaeaee16e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x2adaeaedc0d0" loc="60:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x2adaeaedc0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x2adaeaedc420"/>
        <function-ref name="initial" scoped="" ref="0x2adaeaedc5a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioTimeStamping" ref="0x2adaeaeda818" loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioTimeStamping" scoped="" ref="0x2adaeaeda818"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioTimeStamping"/>
      </instance>
      <interface-functions>
        <function-ref name="transmittedSFD" scoped="" ref="0x2adaeaedab68"/>
        <function-ref name="receivedSFD" scoped="" ref="0x2adaeaedacf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x2adaeaf176d8" loc="56:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x2adaeaf176d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x2adaeaf17a28"/>
        <function-ref name="stopDone" scoped="" ref="0x2adaeaf17bb0"/>
        <function-ref name="start" scoped="" ref="0x2adaeaf17d38"/>
        <function-ref name="stop" scoped="" ref="0x2adaeaf16020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x2adaeaf341e0" loc="71:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x2adaeaf341e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea95a078"/>
            <typename><typedef-ref name="TMicro" ref="0x2adaea95a3d0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x2adaeaf33088"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="setWakeupTask" ref="0x2adaeaf47de8" loc="108:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="setWakeupTask" scoped="" ref="0x2adaeaf47de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeaf46170"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeaf462f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startStopDone" ref="0x2adaeaf531c8" loc="175:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startStopDone" scoped="" ref="0x2adaeaf531c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeaf53518"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeaf536a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiNoiseFloor" ref="0x2adaeaf2e838" loc="73:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiNoiseFloor" scoped="" ref="0x2adaeaf2e838"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeaf31410"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeaf31898"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x2adaeaf3abd8" loc="69:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2adaeaf3abd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2adaeaf3d020"/>
        <function-ref name="rand32" scoped="" ref="0x2adaeaf3d1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x2adaeaf14318" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x2adaeaf14318"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="getLocalSleepInterval" scoped="" ref="0x2adaeaf14668"/>
        <function-ref name="getRxDutyCycle" scoped="" ref="0x2adaeaf147f0"/>
        <function-ref name="sleepIntervalToDutyCycle" scoped="" ref="0x2adaeaf14978"/>
        <function-ref name="getLocalDutyCycle" scoped="" ref="0x2adaeaf14b00"/>
        <function-ref name="setRxSleepInterval" scoped="" ref="0x2adaeaf14c88"/>
        <function-ref name="setLocalDutyCycle" scoped="" ref="0x2adaeaf14e10"/>
        <function-ref name="setRxDutyCycle" scoped="" ref="0x2adaeaf13020"/>
        <function-ref name="dutyCycleToSleepInterval" scoped="" ref="0x2adaeaf131a8"/>
        <function-ref name="getRxSleepInterval" scoped="" ref="0x2adaeaf13330"/>
        <function-ref name="setLocalSleepInterval" scoped="" ref="0x2adaeaf134b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x2adaeaf162d8" loc="57:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x2adaeaf162d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x2adaeaf16628"/>
        <function-ref name="enableCca" scoped="" ref="0x2adaeaf167b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeaf170c0" loc="55:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeaf170c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeaf17410"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiCheckChannel" ref="0x2adaeaf30108" loc="74:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiCheckChannel" scoped="" ref="0x2adaeaf30108"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeaf30c88"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeaf4e150"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Squelch" ref="0x2adaeaf3ce50" loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x2adaeaf3ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2adaeaf3e1e8"/>
        <function-ref name="settled" scoped="" ref="0x2adaeaf3e370"/>
        <function-ref name="adjust" scoped="" ref="0x2adaeaf3e4f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sleepCheck" ref="0x2adaeaf645c8" loc="293:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sleepCheck" scoped="" ref="0x2adaeaf645c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeaf64918"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeaf64aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WakeupTimer" ref="0x2adaeaf3d620" loc="70:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="WakeupTimer" scoped="" ref="0x2adaeaf3d620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeaf378f0"/>
        <function-ref name="fired" scoped="" ref="0x2adaeaf38020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2adaeaf38d10"/>
        <function-ref name="isOneShot" scoped="" ref="0x2adaeaf388c0"/>
        <function-ref name="getdt" scoped="" ref="0x2adaeaf361c0"/>
        <function-ref name="gett0" scoped="" ref="0x2adaeaf37d40"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeaf38470"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2adaeaf39198"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2adaeaf37320"/>
        <function-ref name="startOneShot" scoped="" ref="0x2adaeaf39638"/>
        <function-ref name="stop" scoped="" ref="0x2adaeaf39ad8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioInit" ref="0x2adaeaf13878" loc="62:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioInit" scoped="" ref="0x2adaeaf13878"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeaf13bc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="adjustSquelch" ref="0x2adaeaf83b60" loc="316:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="adjustSquelch" scoped="" ref="0x2adaeaf83b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeaf82020"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeaf821a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x2adaeaf1d538" loc="67:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x2adaeaf1d538"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x2adaeaf1d888"/>
        <function-ref name="biasOn" scoped="" ref="0x2adaeaf1da10"/>
        <function-ref name="getRFPower" scoped="" ref="0x2adaeaf1db98"/>
        <function-ref name="tuneManual" scoped="" ref="0x2adaeaf1dd20"/>
        <function-ref name="selectLock" scoped="" ref="0x2adaeaf27020"/>
        <function-ref name="init" scoped="" ref="0x2adaeaf271a8"/>
        <function-ref name="getLock" scoped="" ref="0x2adaeaf27330"/>
        <function-ref name="coreOn" scoped="" ref="0x2adaeaf274b8"/>
        <function-ref name="txMode" scoped="" ref="0x2adaeaf27640"/>
        <function-ref name="getLOStatus" scoped="" ref="0x2adaeaf277c8"/>
        <function-ref name="rxMode" scoped="" ref="0x2adaeaf27950"/>
        <function-ref name="off" scoped="" ref="0x2adaeaf27ad8"/>
        <function-ref name="setRFPower" scoped="" ref="0x2adaeaf27c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioControl" ref="0x2adaeaf0f6f8" loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioControl" scoped="" ref="0x2adaeaf0f6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2adaeaf0fa48"/>
        <function-ref name="stop" scoped="" ref="0x2adaeaf0fbd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiPulseCheck" ref="0x2adaeaf4e920" loc="75:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiPulseCheck" scoped="" ref="0x2adaeaf4e920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeaf4d4c8"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeaf4d950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x2adaeaf16a68" loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x2adaeaf16a68"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x2adaeaf16db8"/>
        <function-ref name="initial" scoped="" ref="0x2adaeaf14020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadio" ref="0x2adaeaf28740" loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x2adaeaf28740"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x2adaeaf28a90"/>
        <function-ref name="listen" scoped="" ref="0x2adaeaf28c18"/>
        <function-ref name="syncing" scoped="" ref="0x2adaeaf28da0"/>
        <function-ref name="rxDone" scoped="" ref="0x2adaeaf10020"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x2adaeaf101a8"/>
        <function-ref name="idleByte" scoped="" ref="0x2adaeaf10330"/>
        <function-ref name="cts" scoped="" ref="0x2adaeaf104b8"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x2adaeaf10640"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeaf107c8"/>
        <function-ref name="off" scoped="" ref="0x2adaeaf10950"/>
        <function-ref name="getTxMessage" scoped="" ref="0x2adaeaf10ad8"/>
        <function-ref name="rx" scoped="" ref="0x2adaeaf10c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2adaeafe02a8" loc="62:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2adaeafe02a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2adaeafe05f8"/>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeafe0780"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeafe0908"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeafe0a90"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2adaeafe0c18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplCC1000Spi" ref="0x2adaeafdcb90" loc="69:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x2adaeafdcb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x2adaeafdb020"/>
        <function-ref name="initSlave" scoped="" ref="0x2adaeafdb1a8"/>
        <function-ref name="disableIntr" scoped="" ref="0x2adaeafdb330"/>
        <function-ref name="writeByte" scoped="" ref="0x2adaeafdb4b8"/>
        <function-ref name="enableIntr" scoped="" ref="0x2adaeafdb640"/>
        <function-ref name="txMode" scoped="" ref="0x2adaeafdb7c8"/>
        <function-ref name="readByte" scoped="" ref="0x2adaeafdb950"/>
        <function-ref name="rxMode" scoped="" ref="0x2adaeafdbad8"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeafdbc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x2adaeafbd4d8" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2adaeafbd4d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeafbd828"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeafbd9b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeafbdb38"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeafbdcc0"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeafbde48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeafc1760" loc="57:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeafc1760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeafc1ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiRx" ref="0x2adaeafda100" loc="71:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiRx" scoped="" ref="0x2adaeafda100"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeafdac80"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeafd9130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2adaeafbc108" loc="60:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2adaeafbc108"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeafbc458"/>
        <function-ref name="receive" scoped="" ref="0x2adaeafbc5e0"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeafbc768"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketSent" ref="0x2adaeb03fbd0" loc="376:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketSent" scoped="" ref="0x2adaeb03fbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeb03e0a0"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeb03e228"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x2adaeafde7e0" loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x2adaeafde7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2adaeafdeb30"/>
        <function-ref name="noAck" scoped="" ref="0x2adaeafdecb8"/>
        <function-ref name="wasAcked" scoped="" ref="0x2adaeafdee40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x2adaeafdd1e8" loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x2adaeafdd1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x2adaeafdd538"/>
        <function-ref name="biasOn" scoped="" ref="0x2adaeafdd6c0"/>
        <function-ref name="getRFPower" scoped="" ref="0x2adaeafdd848"/>
        <function-ref name="tuneManual" scoped="" ref="0x2adaeafdd9d0"/>
        <function-ref name="selectLock" scoped="" ref="0x2adaeafddb58"/>
        <function-ref name="init" scoped="" ref="0x2adaeafddce0"/>
        <function-ref name="getLock" scoped="" ref="0x2adaeafdde68"/>
        <function-ref name="coreOn" scoped="" ref="0x2adaeafdc020"/>
        <function-ref name="txMode" scoped="" ref="0x2adaeafdc1a8"/>
        <function-ref name="getLOStatus" scoped="" ref="0x2adaeafdc330"/>
        <function-ref name="rxMode" scoped="" ref="0x2adaeafdc4b8"/>
        <function-ref name="off" scoped="" ref="0x2adaeafdc640"/>
        <function-ref name="setRFPower" scoped="" ref="0x2adaeafdc7c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketReceived" ref="0x2adaeb05e908" loc="547:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketReceived" scoped="" ref="0x2adaeb05e908"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeb05ec58"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeb05ede0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteRadio" ref="0x2adaeafdf020" loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x2adaeafdf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x2adaeafdf370"/>
        <function-ref name="listen" scoped="" ref="0x2adaeafdf4f8"/>
        <function-ref name="syncing" scoped="" ref="0x2adaeafdf680"/>
        <function-ref name="rxDone" scoped="" ref="0x2adaeafdf808"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x2adaeafdf990"/>
        <function-ref name="idleByte" scoped="" ref="0x2adaeafdfb18"/>
        <function-ref name="cts" scoped="" ref="0x2adaeafdfca0"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x2adaeafdfe28"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeafde020"/>
        <function-ref name="off" scoped="" ref="0x2adaeafde1a8"/>
        <function-ref name="getTxMessage" scoped="" ref="0x2adaeafde330"/>
        <function-ref name="rx" scoped="" ref="0x2adaeafde4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x2adaeafc1d60" loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x2adaeafc1d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2adaeafbd0d8"/>
        <function-ref name="stop" scoped="" ref="0x2adaeafbd260"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioTimeStamping" ref="0x2adaeafbca60" loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioTimeStamping" scoped="" ref="0x2adaeafbca60"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioTimeStamping"/>
      </instance>
      <interface-functions>
        <function-ref name="transmittedSFD" scoped="" ref="0x2adaeafbcdb0"/>
        <function-ref name="receivedSFD" scoped="" ref="0x2adaeafe0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualRssi" ref="0x2adaeb09ae28" loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualRssi" scoped="" ref="0x2adaeb09ae28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb099a18"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb094020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2adaeb09a020" loc="51:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2adaeb09a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb09a370"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2adaeb09a4f8"/>
        <function-ref name="request" scoped="" ref="0x2adaeb09a680"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb09a808"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb09a990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Rssi" ref="0x2adaeb09c050" loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Rssi" scoped="" ref="0x2adaeb09c050"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb09cbd0"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb09b088"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeb0aa1e8" loc="43:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeb0aa1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb0aa538"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Squelch" ref="0x2adaeb0aa808" loc="44:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x2adaeb0aa808"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x2adaeb0aab58"/>
        <function-ref name="settled" scoped="" ref="0x2adaeb0aace0"/>
        <function-ref name="adjust" scoped="" ref="0x2adaeb0aae68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x2adaeb0bc080" loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x2adaeb0bc080"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea95a078"/>
            <typename><typedef-ref name="TMicro" ref="0x2adaea95a3d0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x2adaeb0bcdd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC" ref="0x2adaeb0be318" loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC" scoped="" ref="0x2adaeb0be318"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb0be668"/>
        <function-ref name="read" scoped="" ref="0x2adaeb0be7f0"/>
        <function-ref name="write" scoped="" ref="0x2adaeb0be978"/>
        <function-ref name="getLOCK" scoped="" ref="0x2adaeb0beb00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Control" ref="0x2adaeb09d7a8" loc="43:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x2adaeb09d7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x2adaeb09daf8"/>
        <function-ref name="biasOn" scoped="" ref="0x2adaeb09dc80"/>
        <function-ref name="getRFPower" scoped="" ref="0x2adaeb09de08"/>
        <function-ref name="tuneManual" scoped="" ref="0x2adaeb0bf020"/>
        <function-ref name="selectLock" scoped="" ref="0x2adaeb0bf1a8"/>
        <function-ref name="init" scoped="" ref="0x2adaeb0bf330"/>
        <function-ref name="getLock" scoped="" ref="0x2adaeb0bf4b8"/>
        <function-ref name="coreOn" scoped="" ref="0x2adaeb0bf640"/>
        <function-ref name="txMode" scoped="" ref="0x2adaeb0bf7c8"/>
        <function-ref name="getLOStatus" scoped="" ref="0x2adaeb0bf950"/>
        <function-ref name="rxMode" scoped="" ref="0x2adaeb0bfad8"/>
        <function-ref name="off" scoped="" ref="0x2adaeb0bfc60"/>
        <function-ref name="setRFPower" scoped="" ref="0x2adaeb0bfde8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x2adaeb122908" loc="39:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x2adaeb122908"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x2adaeb122c58"/>
        <function-ref name="initSlave" scoped="" ref="0x2adaeb122de0"/>
        <function-ref name="disableIntr" scoped="" ref="0x2adaeb121020"/>
        <function-ref name="writeByte" scoped="" ref="0x2adaeb1211a8"/>
        <function-ref name="enableIntr" scoped="" ref="0x2adaeb121330"/>
        <function-ref name="txMode" scoped="" ref="0x2adaeb1214b8"/>
        <function-ref name="readByte" scoped="" ref="0x2adaeb121640"/>
        <function-ref name="rxMode" scoped="" ref="0x2adaeb1217c8"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeb121950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiAdc" ref="0x2adaeb1244e0" loc="37:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiAdc" scoped="" ref="0x2adaeb1244e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb123088"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb123510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiResource" ref="0x2adaeb123b80" loc="38:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiResource" scoped="" ref="0x2adaeb123b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb122020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2adaeb1221a8"/>
        <function-ref name="request" scoped="" ref="0x2adaeb122330"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb1224b8"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb122640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x2adaeb121bf8" loc="40:/opt/tinyos-2.0.2/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x2adaeb121bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb120020"/>
        <function-ref name="read" scoped="" ref="0x2adaeb1201a8"/>
        <function-ref name="write" scoped="" ref="0x2adaeb120330"/>
        <function-ref name="getLOCK" scoped="" ref="0x2adaeb1204b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2adaeb2ca020" loc="28:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb2ca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2adaeb2ca370"/>
        <function-ref name="configure" scoped="" ref="0x2adaeb2ca4f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2adaeb2cc128" loc="24:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2adaeb2cc128"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb2ccca8"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb2cb190"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2adaeb2cb748" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2adaeb2cb748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2adaeb2cba98"/>
        <function-ref name="getChannel" scoped="" ref="0x2adaeb2cbc20"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2adaeb2cbda8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2adaeb2cd438" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2adaeb2cd438"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb2cd788"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2adaeb2cd910"/>
        <function-ref name="request" scoped="" ref="0x2adaeb2cda98"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb2cdc20"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb2cdda8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2adaeb138a00" loc="18:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2adaeb138a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb13c578"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb13c9c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2adaeb13b620" loc="19:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2adaeb13b620"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb1371d0"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb137658"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2adaeb135208" loc="22:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2adaeb135208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2adaeb135558"/>
        <function-ref name="getChannel" scoped="" ref="0x2adaeb1356e0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2adaeb135868"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2adaeb15f050" loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2adaeb15f050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb15f3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2adaeb15f528"/>
        <function-ref name="request" scoped="" ref="0x2adaeb15f6b0"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb15f838"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb15f9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2adaeb158890" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb158890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2adaeb158be0"/>
        <function-ref name="configure" scoped="" ref="0x2adaeb158d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2adaeb14f9b0" loc="47:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2adaeb14f9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2adaeb14fd00"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeb158020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2adaeb155cb8" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2adaeb155cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2adaeb1590a0"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb159228"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeb1593b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2adaeb15eaf0" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2adaeb15eaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb15ee40"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2adaeb15b020"/>
        <function-ref name="request" scoped="" ref="0x2adaeb15b1a8"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb15b330"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb15b4b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeb154980" loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeb154980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb154cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x2adaeb14a9d8" loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x2adaeb14a9d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2adaeb14ad28"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeb174020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x2adaeb14a080" loc="67:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2adaeb14a080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2adaeb14a3d0"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb14a558"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeb14a6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x2adaeb166888" loc="71:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2adaeb166888"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2adaeb166bd8"/>
        <function-ref name="getAdmux" scoped="" ref="0x2adaeb166d60"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2adaeb173020"/>
        <function-ref name="isEnabled" scoped="" ref="0x2adaeb1731a8"/>
        <function-ref name="enableAdc" scoped="" ref="0x2adaeb173330"/>
        <function-ref name="setAdmux" scoped="" ref="0x2adaeb1734b8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2adaeb173640"/>
        <function-ref name="isComplete" scoped="" ref="0x2adaeb1737c8"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb173950"/>
        <function-ref name="disableAdc" scoped="" ref="0x2adaeb173ad8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2adaeb173c60"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2adaeb173de8"/>
        <function-ref name="startConversion" scoped="" ref="0x2adaeb172020"/>
        <function-ref name="isStarted" scoped="" ref="0x2adaeb1722a8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2adaeb172430"/>
        <function-ref name="setContinuous" scoped="" ref="0x2adaeb1725b8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2adaeb172740"/>
        <function-ref name="getValue" scoped="" ref="0x2adaeb1728c8"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeb172a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x2adaeb175860" loc="66:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2adaeb175860"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2adaeb175bb0"/>
        <function-ref name="stop" scoped="" ref="0x2adaeb175d38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x2adaeb172d30" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x2adaeb172d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x2adaeb1650d8"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x2adaeb165260"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x2adaeb1653e8"/>
        <function-ref name="actualMicro" scoped="" ref="0x2adaeb165570"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x2adaeb1656f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2adaeb18c020" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2adaeb18c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2adaeb18c370"/>
        <function-ref name="getAdmux" scoped="" ref="0x2adaeb18c4f8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2adaeb18c680"/>
        <function-ref name="isEnabled" scoped="" ref="0x2adaeb18c808"/>
        <function-ref name="enableAdc" scoped="" ref="0x2adaeb18c990"/>
        <function-ref name="setAdmux" scoped="" ref="0x2adaeb18cb18"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2adaeb18cca0"/>
        <function-ref name="isComplete" scoped="" ref="0x2adaeb18ce28"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb1b7020"/>
        <function-ref name="disableAdc" scoped="" ref="0x2adaeb1b71a8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2adaeb1b7330"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2adaeb1b74b8"/>
        <function-ref name="startConversion" scoped="" ref="0x2adaeb1b7640"/>
        <function-ref name="isStarted" scoped="" ref="0x2adaeb1b78c8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2adaeb1b7a50"/>
        <function-ref name="setContinuous" scoped="" ref="0x2adaeb1b7bd8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2adaeb1b7d60"/>
        <function-ref name="getValue" scoped="" ref="0x2adaeb1b6020"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeb1b61a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x2adaeb1b6db8" loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x2adaeb1b6db8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x2adaeb1b3170"/>
        <function-ref name="getAdmux" scoped="" ref="0x2adaeb1b32f8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x2adaeb1b3480"/>
        <function-ref name="isEnabled" scoped="" ref="0x2adaeb1b3608"/>
        <function-ref name="enableAdc" scoped="" ref="0x2adaeb1b3790"/>
        <function-ref name="setAdmux" scoped="" ref="0x2adaeb1b3918"/>
        <function-ref name="enableInterruption" scoped="" ref="0x2adaeb1b3aa0"/>
        <function-ref name="isComplete" scoped="" ref="0x2adaeb1b3c28"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb1b3db0"/>
        <function-ref name="disableAdc" scoped="" ref="0x2adaeb1b2020"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x2adaeb1b21a8"/>
        <function-ref name="disableInterruption" scoped="" ref="0x2adaeb1b2330"/>
        <function-ref name="startConversion" scoped="" ref="0x2adaeb1b24b8"/>
        <function-ref name="isStarted" scoped="" ref="0x2adaeb1b2740"/>
        <function-ref name="setAdcsra" scoped="" ref="0x2adaeb1b28c8"/>
        <function-ref name="setContinuous" scoped="" ref="0x2adaeb1b2a50"/>
        <function-ref name="getAdcsra" scoped="" ref="0x2adaeb1b2bd8"/>
        <function-ref name="getValue" scoped="" ref="0x2adaeb1b2d60"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeb1b1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x2adaeb1b1330" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x2adaeb1b1330"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x2adaeb1b1680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2adaeb24a698" loc="82:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2adaeb24a698"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2adaeb24aa08"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2adaeb24ab90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2adaeb2483c8" loc="86:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb2483c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2adaeb248738"/>
        <function-ref name="configure" scoped="" ref="0x2adaeb2488c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2adaeb24add8" loc="83:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb24add8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb249170"/>
        <function-ref name="requested" scoped="" ref="0x2adaeb2492f8"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb249480"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb249608"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2adaeb249790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2adaeb24c840" loc="81:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2adaeb24c840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb24cbb0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2adaeb24cd38"/>
        <function-ref name="request" scoped="" ref="0x2adaeb24a020"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb24a1a8"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb24a330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2adaeb2499d8" loc="84:/opt/tinyos-2.0.2/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2adaeb2499d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2adaeb249d28"/>
        <function-ref name="userId" scoped="" ref="0x2adaeb248020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeb72a140" loc="34:/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeb72a140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb72a490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x2adaeb72a718" loc="35:/opt/tinyos-2.0.2/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x2adaeb72a718"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2adaeb72aa68"/>
        <function-ref name="isEmpty" scoped="" ref="0x2adaeb72abf0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2adaeb72ad78"/>
        <function-ref name="dequeue" scoped="" ref="0x2adaeb729020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x2adaeb727698" loc="55:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x2adaeb727698"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x2adaeb727a08"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2adaeb727b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x2adaeb7243e8" loc="60:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x2adaeb7243e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x2adaeb724758"/>
        <function-ref name="configure" scoped="" ref="0x2adaeb7248e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x2adaeb724b68" loc="61:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x2adaeb724b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x2adaeb723020"/>
        <function-ref name="isEmpty" scoped="" ref="0x2adaeb7231a8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x2adaeb723330"/>
        <function-ref name="dequeue" scoped="" ref="0x2adaeb7234b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x2adaeb727dd8" loc="56:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb727dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb726170"/>
        <function-ref name="requested" scoped="" ref="0x2adaeb7262f8"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb726480"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb726608"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2adaeb726790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x2adaeb723700" loc="62:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x2adaeb723700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x2adaeb723a50"/>
        <function-ref name="led0Toggle" scoped="" ref="0x2adaeb723bd8"/>
        <function-ref name="led1On" scoped="" ref="0x2adaeb723d60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x2adaeb722020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x2adaeb7221a8"/>
        <function-ref name="get" scoped="" ref="0x2adaeb722330"/>
        <function-ref name="led1Off" scoped="" ref="0x2adaeb7224b8"/>
        <function-ref name="led0On" scoped="" ref="0x2adaeb722ad8"/>
        <function-ref name="set" scoped="" ref="0x2adaeb7227c8"/>
        <function-ref name="led2On" scoped="" ref="0x2adaeb722640"/>
        <function-ref name="led2Off" scoped="" ref="0x2adaeb722950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x2adaeb728830" loc="54:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2adaeb728830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb728ba0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2adaeb728d28"/>
        <function-ref name="request" scoped="" ref="0x2adaeb727020"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb7271a8"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb727330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x2adaeb7269d8" loc="57:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2adaeb7269d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2adaeb726d28"/>
        <function-ref name="userId" scoped="" ref="0x2adaeb724020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x2adaeb722da0" loc="74:/opt/tinyos-2.0.2/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x2adaeb722da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeb721170"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeb7212f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2adaeb2453f0" loc="62:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2adaeb2453f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2adaeb245740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2adaeb245988" loc="63:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb245988"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb245cd8"/>
        <function-ref name="requested" scoped="" ref="0x2adaeb245e60"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb25e020"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb25e1a8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2adaeb25e330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2adaeb246c30" loc="60:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2adaeb246c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2adaeb245020"/>
        <function-ref name="stop" scoped="" ref="0x2adaeb2451a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2adaeb25e578" loc="64:/opt/tinyos-2.0.2/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2adaeb25e578"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2adaeb25e8c8"/>
        <function-ref name="userId" scoped="" ref="0x2adaeb25ea50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x2adaeb735020" loc="52:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x2adaeb735020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x2adaeb735370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x2adaeb7355b8" loc="53:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x2adaeb7355b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb735908"/>
        <function-ref name="requested" scoped="" ref="0x2adaeb735a90"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb735c18"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb735da0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x2adaeb734020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x2adaeb7367f8" loc="50:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x2adaeb7367f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x2adaeb736b48"/>
        <function-ref name="stop" scoped="" ref="0x2adaeb736cd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x2adaeb734268" loc="54:/opt/tinyos-2.0.2/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x2adaeb734268"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x2adaeb7345b8"/>
        <function-ref name="userId" scoped="" ref="0x2adaeb734740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2adaeb286020" loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2adaeb286020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb286b68"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb285020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x2adaeb285c38" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x2adaeb285c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb283820"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb283ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x2adaeb281208" loc="53:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x2adaeb281208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x2adaeb281558"/>
        <function-ref name="getChannel" scoped="" ref="0x2adaeb2816e0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x2adaeb281868"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x2adaeb282358" loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x2adaeb282358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x2adaeb2826a8"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb282830"/>
        <function-ref name="dataReady" scoped="" ref="0x2adaeb2829b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x2adaeb2a00c0" loc="103:/opt/tinyos-2.0.2/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x2adaeb2a00c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeb2a0410"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeb2a0598"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x2adaeb28d020" loc="24:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x2adaeb28d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb28db88"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb2a6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x2adaeb2a6860" loc="26:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x2adaeb2a6860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x2adaeb2a5458"/>
        <function-ref name="readDone" scoped="" ref="0x2adaeb2a58c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x2adaeb2a3020" loc="27:/opt/tinyos-2.0.2/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x2adaeb2a3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x2adaeb2a3390"/>
        <function-ref name="immediateRequest" scoped="" ref="0x2adaeb2a3518"/>
        <function-ref name="request" scoped="" ref="0x2adaeb2a36a0"/>
        <function-ref name="granted" scoped="" ref="0x2adaeb2a3828"/>
        <function-ref name="isOwner" scoped="" ref="0x2adaeb2a39b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x2adaeb2c3a50" loc="35:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2adaeb2c3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2adaeb2c3da0"/>
        <function-ref name="rand32" scoped="" ref="0x2adaeb2c2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x2adaeb2c1980" loc="34:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x2adaeb2c1980"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb2c3528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeb125c50" loc="33:/opt/tinyos-2.0.2/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeb125c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb2c4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x2adaeb2bd5e8" loc="34:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2adaeb2bd5e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2adaeb2bd938"/>
        <function-ref name="rand32" scoped="" ref="0x2adaeb2bdac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x2adaeb2be528" loc="33:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x2adaeb2be528"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb2bd0c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeb2c2b40" loc="32:/opt/tinyos-2.0.2/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeb2c2b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb2be020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x2adaeb2e8100" loc="37:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
      <component-ref qname="RandomMlcgP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x2adaeb2e8100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x2adaeb2e8450"/>
        <function-ref name="rand32" scoped="" ref="0x2adaeb2e85d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x2adaeb2e9020" loc="36:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
      <component-ref qname="RandomMlcgP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x2adaeb2e9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb2e9b68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x2adaeb2bb6c0" loc="35:/opt/tinyos-2.0.2/tos/system/RandomMlcgP.nc">
      <component-ref qname="RandomMlcgP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x2adaeb2bb6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x2adaeb2bba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x2adaeb2c6a60" loc="37:/opt/tinyos-2.0.2/tos/system/TimerMilliC.nc">
      <component-ref qname="CC1000CsmaRadioC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x2adaeb2c6a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea94c150"/>
            <typename><typedef-ref name="TMilli" ref="0x2adaea94c4a8"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x2adaeb2dad60"/>
        <function-ref name="fired" scoped="" ref="0x2adaeb2b9470"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x2adaeb2da1c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x2adaeb2b9d10"/>
        <function-ref name="getdt" scoped="" ref="0x2adaeb2d9648"/>
        <function-ref name="gett0" scoped="" ref="0x2adaeb2d91f8"/>
        <function-ref name="isRunning" scoped="" ref="0x2adaeb2b98c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x2adaeb2c5620"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x2adaeb2da790"/>
        <function-ref name="startOneShot" scoped="" ref="0x2adaeb2c5ac0"/>
        <function-ref name="stop" scoped="" ref="0x2adaeb2b9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x2adaeb302428" loc="43:/opt/tinyos-2.0.2/tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x2adaeb302428"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x2adaeb302778"/>
        <function-ref name="changed" scoped="" ref="0x2adaeb302900"/>
        <function-ref name="amGroup" scoped="" ref="0x2adaeb302a88"/>
        <function-ref name="setAddress" scoped="" ref="0x2adaeb302c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x2adaeb2d7be0" loc="40:/opt/tinyos-2.0.2/tos/platforms/mica/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x2adaeb2d7be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x2adaea95a078"/>
            <typename><typedef-ref name="TMicro" ref="0x2adaea95a3d0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x2adaeb2f4970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2adaeb39b7a8" loc="41:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <component-ref qname="BlinkAppC.AttestationRequestSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2adaeb39b7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeb39baf8"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb39bc80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeb39be08"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb39a020"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeb39a1a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2adaeb39a3f0" loc="42:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <component-ref qname="BlinkAppC.AttestationRequestSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2adaeb39a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2adaeb39a740"/>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeb39a8c8"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb39aa50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeb39abd8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2adaeb39ad60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2adaeb399020" loc="43:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <component-ref qname="BlinkAppC.AttestationRequestSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2adaeb399020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2adaeb399370"/>
        <function-ref name="source" scoped="" ref="0x2adaeb3994f8"/>
        <function-ref name="address" scoped="" ref="0x2adaeb399680"/>
        <function-ref name="destination" scoped="" ref="0x2adaeb399808"/>
        <function-ref name="setSource" scoped="" ref="0x2adaeb399990"/>
        <function-ref name="setDestination" scoped="" ref="0x2adaeb399b18"/>
        <function-ref name="type" scoped="" ref="0x2adaeb399ca0"/>
        <function-ref name="setType" scoped="" ref="0x2adaeb399e28"/>
        <function-ref name="isForMe" scoped="" ref="0x2adaeb398020"/>
        <function-ref name="setGroup" scoped="" ref="0x2adaeb3981a8"/>
        <function-ref name="localGroup" scoped="" ref="0x2adaeb398330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x2adaeb3985b8" loc="44:/opt/tinyos-2.0.2/tos/system/AMSenderC.nc">
      <component-ref qname="BlinkAppC.AttestationRequestSender"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x2adaeb3985b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x2adaeb398908"/>
        <function-ref name="noAck" scoped="" ref="0x2adaeb398a90"/>
        <function-ref name="wasAcked" scoped="" ref="0x2adaeb398c18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x2adaeb7600c0" loc="36:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
      <component-ref qname="BlinkAppC.AttestationRequestSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2adaeb7600c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeb760410"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb760598"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeb760720"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb7608a8"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeb760a30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x2adaeb760cd8" loc="38:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
      <component-ref qname="BlinkAppC.AttestationRequestSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2adaeb760cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeb75e0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb75e228"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeb75e3b0"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb75e538"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeb75e6c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x2adaeb75e908" loc="39:/opt/tinyos-2.0.2/tos/system/AMQueueEntryP.nc">
      <component-ref qname="BlinkAppC.AttestationRequestSender.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2adaeb75e908"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2adaeb75ec58"/>
        <function-ref name="source" scoped="" ref="0x2adaeb75ede0"/>
        <function-ref name="address" scoped="" ref="0x2adaeb75d020"/>
        <function-ref name="destination" scoped="" ref="0x2adaeb75d1a8"/>
        <function-ref name="setSource" scoped="" ref="0x2adaeb75d330"/>
        <function-ref name="setDestination" scoped="" ref="0x2adaeb75d4b8"/>
        <function-ref name="type" scoped="" ref="0x2adaeb75d640"/>
        <function-ref name="setType" scoped="" ref="0x2adaeb75d7c8"/>
        <function-ref name="isForMe" scoped="" ref="0x2adaeb75d950"/>
        <function-ref name="setGroup" scoped="" ref="0x2adaeb75dad8"/>
        <function-ref name="localGroup" scoped="" ref="0x2adaeb75dc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x2adaeb322b88" loc="35:/opt/tinyos-2.0.2/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2adaeb322b88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeb31f020"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb31f1a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeb31f330"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb31f4b8"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeb31f640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x2adaeb3733e8" loc="40:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x2adaeb3733e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeb373758"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb3738e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeb373a68"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb373bf0"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeb373d78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x2adaeb375660" loc="38:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x2adaeb375660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x2adaeb3759d0"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb375b58"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeb375ce0"/>
        <function-ref name="cancel" scoped="" ref="0x2adaeb375e68"/>
        <function-ref name="sendDone" scoped="" ref="0x2adaeb373020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x2adaeb371578" loc="42:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2adaeb371578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2adaeb3718c8"/>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeb371a50"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb371bd8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeb371d60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2adaeb370020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x2adaeb3702e8" loc="161:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x2adaeb3702e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeb370638"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeb3707c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x2adaeb370a88" loc="118:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x2adaeb370a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x2adaeb370dd8"/>
        <function-ref name="runTask" scoped="" ref="0x2adaeb36f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x2adaeb372020" loc="41:/opt/tinyos-2.0.2/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2adaeb372020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2adaeb372370"/>
        <function-ref name="source" scoped="" ref="0x2adaeb3724f8"/>
        <function-ref name="address" scoped="" ref="0x2adaeb372680"/>
        <function-ref name="destination" scoped="" ref="0x2adaeb372808"/>
        <function-ref name="setSource" scoped="" ref="0x2adaeb372990"/>
        <function-ref name="setDestination" scoped="" ref="0x2adaeb372b18"/>
        <function-ref name="type" scoped="" ref="0x2adaeb372ca0"/>
        <function-ref name="setType" scoped="" ref="0x2adaeb372e28"/>
        <function-ref name="isForMe" scoped="" ref="0x2adaeb371020"/>
        <function-ref name="setGroup" scoped="" ref="0x2adaeb3711a8"/>
        <function-ref name="localGroup" scoped="" ref="0x2adaeb371330"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x2adaeb38d080" loc="38:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
      <component-ref qname="BlinkAppC.AttestationResponseReceiver"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x2adaeb38d080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x2adaeb38d3d0"/>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeb38d558"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb38d6e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x2adaeb38d868"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x2adaeb38d9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x2adaeb38f7a8" loc="37:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
      <component-ref qname="BlinkAppC.AttestationResponseReceiver"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x2adaeb38f7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="payloadLength" scoped="" ref="0x2adaeb38faf8"/>
        <function-ref name="receive" scoped="" ref="0x2adaeb38fc80"/>
        <function-ref name="getPayload" scoped="" ref="0x2adaeb38fe08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x2adaeb38dc38" loc="39:/opt/tinyos-2.0.2/tos/system/AMReceiverC.nc">
      <component-ref qname="BlinkAppC.AttestationResponseReceiver"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x2adaeb38dc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x2adaeb38c020"/>
        <function-ref name="source" scoped="" ref="0x2adaeb38c1a8"/>
        <function-ref name="address" scoped="" ref="0x2adaeb38c330"/>
        <function-ref name="destination" scoped="" ref="0x2adaeb38c4b8"/>
        <function-ref name="setSource" scoped="" ref="0x2adaeb38c640"/>
        <function-ref name="setDestination" scoped="" ref="0x2adaeb38c7c8"/>
        <function-ref name="type" scoped="" ref="0x2adaeb38c950"/>
        <function-ref name="setType" scoped="" ref="0x2adaeb38cad8"/>
        <function-ref name="isForMe" scoped="" ref="0x2adaeb38cc60"/>
        <function-ref name="setGroup" scoped="" ref="0x2adaeb38cde8"/>
        <function-ref name="localGroup" scoped="" ref="0x2adaeb38b020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="40:/opt/tinyos-2.0.2/tos/interfaces/Init.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2adaea9d4178" loc="51:/opt/tinyos-2.0.2/tos/interfaces/Init.nc">
        <documentation loc="42:/opt/tinyos-2.0.2/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="39:/opt/tinyos-2.0.2/tos/interfaces/Boot.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x2adaea9cdd60" loc="49:/opt/tinyos-2.0.2/tos/interfaces/Boot.nc">
        <documentation loc="40:/opt/tinyos-2.0.2/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x2adaea9da108" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x2adaea9dbe20" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x2adaea9cf8a8" loc="31:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x2adaea9dc2d0" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2adaea9dc060" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x2adaea9dcd58" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x2adaea9dcae8" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x2adaea9db5d0" loc="53:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x2adaea9e46d0" loc="33:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x2adaea9e4d98" loc="34:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x2adaea9e58e8" loc="31:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x2adaea9f0b58" loc="36:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2adaea9e4020" loc="32:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x2adaea9f0480" loc="35:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2adaea9e8b68" loc="29:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x2adaea9e5258" loc="30:/opt/tinyos-2.0.2/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x2adaeaa455d8" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x2adaeaa3eda0" loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x2adaeaa45db8" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000" loc="48:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
      <documentation loc="38:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <short>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.</short>
        <long>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2adaeaa3c6a0" loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="49:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Initialize CC1K pins&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x2adaeaa3bd10" loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read a value from a CC1000 register.</short>
          <long>&#10; Read a value from a CC1000 register.&#10; @param addr Which CC1000 register&#10; @return Value of register&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x2adaeaa3baa0" loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x2adaeaa3b348" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="54:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Write a value to a CC1000 register.</short>
          <long>&#10; Write a value to a CC1000 register.&#10; @param addr Which CC1000 register&#10; @param data Value to write&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x2adaeaa3cd40" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x2adaeaa3b0c8" loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOCK" ref="0x2adaeaa394c8" loc="72:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read the state of the CHP_OUT pin&#10; </short>
          <long>&#10; Read the state of the CHP_OUT pin&#10; @return State of CHP_OUT as a boolean (TRUE for high)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000Spi" loc="39:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <short>&#10; Interface to the CC1000 chip's serial bus.</short>
        <long>&#10; Interface to the CC1000 chip's serial bus. This isn't really an SPI,&#10; but the mica2 interface was done using the Atmega128 SPI hardware. Hence&#10; the name.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <function command="" provided="0" name="isBufBusy" ref="0x2adaeaa60b48" loc="51:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="47:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Is write buffer busy with the last transmission?&#10; </short>
          <long>&#10; Is write buffer busy with the last transmission?&#10; @return TRUE if the buffer is busy, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="initSlave" ref="0x2adaeaa6d9b0" loc="74:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="71:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Initialise the interface to the CC1000 bus.</short>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x2adaeaa6d290" loc="69:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Disable CC1000 bus interrupts.</short>
          <long>&#10; Disable CC1000 bus interrupts.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x2adaeaa603e0" loc="45:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Write a byte to the CC1000 bus.</short>
          <long>&#10; Write a byte to the CC1000 bus.&#10; @param data Byte to write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2adaeaa60170" loc="45:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x2adaeaa5ea88" loc="64:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="59:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus.</short>
          <long>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus. After this is called, dataReady events will be signaled every&#10; 8 CC1000 data clocks.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x2adaeaa6c0d8" loc="79:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="76:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="readByte" ref="0x2adaeaa5e328" loc="57:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Get the last byte received from the CC1000 bus.</short>
          <long>&#10; Get the last byte received from the CC1000 bus.&#10; @return Last byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x2adaeaa6c808" loc="84:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="81:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2adaeaa6a290" loc="92:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="86:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks.</short>
          <long>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks. &#10; @param data In &#34;receive&#34; mode, the last value received from the CC1000 &#10;   bus.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2adaeaa6a020" loc="92:/opt/tinyos-2.0.2/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x2adaea8e3328" loc="46:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x2adaea8e1258" loc="61:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x2adaea8e3a40" loc="54:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x2adaea8efae8" loc="56:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x2adaea8ee328" loc="64:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="57:/opt/tinyos-2.0.2/tos/interfaces/McuSleep.nc">
      <documentation loc="46:/opt/tinyos-2.0.2/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x2adaea994020" loc="59:/opt/tinyos-2.0.2/tos/interfaces/McuSleep.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="42:/opt/tinyos-2.0.2/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x2adaea9b3780" loc="54:/opt/tinyos-2.0.2/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="44:/opt/tinyos-2.0.2/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x2adaea9365d8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="38:/opt/tinyos-2.0.2/tos/interfaces/McuPowerState.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x2adaea9b40d8" loc="44:/opt/tinyos-2.0.2/tos/interfaces/McuPowerState.nc">
        <documentation loc="39:/opt/tinyos-2.0.2/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2adaea9cace8" loc="42:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2adaea9cace8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2adaeac20760" loc="125:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="121:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2adaeac24110" loc="72:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="69:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x2adaeac22d40" loc="103:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="89:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2adaeac227a8" loc="103:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2adaeac22ac0" loc="103:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x2adaeac22070" loc="87:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="83:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x2adaeac1e6b0" loc="140:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="135:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x2adaeac20e80" loc="133:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="127:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2adaeac24888" loc="81:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x2adaeac26820" loc="53:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2adaeac265b0" loc="53:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x2adaeac21d28" loc="118:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="105:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2adaeac21790" loc="118:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x2adaeac21aa8" loc="118:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x2adaeac25290" loc="62:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2adaeac25020" loc="62:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2adaeac25a38" loc="67:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
        <documentation loc="64:/opt/tinyos-2.0.2/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="66:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
      <documentation loc="51:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x2adaeac38708" loc="92:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <documentation loc="85:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x2adaeac38498" loc="92:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x2adaeac36c00" loc="117:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <documentation loc="111:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x2adaeac36990" loc="117:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2adaeac2fae8" loc="83:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2adaeac36020" loc="109:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="44:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x2adaeac58838" loc="54:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="47:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  msg    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac585c8" loc="54:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x2adaeac56338" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="56:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  msg    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac560c8" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2adaeac6cad8" loc="108:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="97:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.  If&#10; len is not NULL, getPayload will return the length of the payload&#10; in it, which is the same as the return value from&#10; payloadLength(). If a protocol does not support variable length&#10; packets, then *len is equal to maxPayloadLength().&#10;&#10; @param msg   the packet&#10; @param len   pointer to where the current payload length should be stored.&#10; @return      a pointer to the packet's data payload for this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac6c4d8" loc="108:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2adaeac6c820" loc="108:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x2adaeac55c00" loc="95:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="85:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x2adaeac552a0" loc="83:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
        <documentation loc="69:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param msg   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac56bf0" loc="83:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2adaeac55020" loc="83:/opt/tinyos-2.0.2/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="47:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x2adaeac69e80" loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="49:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param msg    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x2adaeac69580" loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x2adaeac698e0" loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2adaeac69bf0" loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2adaeac64020" loc="125:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="115:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; The length of this region is maxPayloadLength(). This command&#10; behaves similarly to &#60;tt>Packet.getPayload&#60;/tt> (minus the&#10; length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  msg    the packet&#10; @return        the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac66be8" loc="125:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x2adaeac663e0" loc="112:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="102:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2adaeac68bf8" loc="85:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="71:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  msg     the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac68988" loc="85:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2adaeac67af0" loc="99:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
        <documentation loc="87:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  msg   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac67548" loc="99:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x2adaeac67870" loc="99:/opt/tinyos-2.0.2/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x2adaeac2b738" loc="50:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="47:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x2adaeac2be70" loc="56:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x2adaeac2a608" loc="61:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x2adaeac29480" loc="72:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x2adaeac3da98" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="85:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2adaeac3c258" loc="106:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="92:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x2adaeac2ad20" loc="66:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="63:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2adaeac3cd58" loc="123:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="109:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x2adaeac3cae8" loc="123:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x2adaeac2b020" loc="45:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="42:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x2adaeac29bf0" loc="78:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="75:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x2adaeac3d360" loc="83:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="50:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
      <function command="" provided="0" name="group" ref="0x2adaeac5cba0" loc="166:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="153:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param amsg the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x2adaeac33130"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2adaeac5c930" loc="166:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x2adaeac4bd30" loc="77:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="69:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param amsg  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2adaeac4bac0" loc="77:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x2adaeac4c7b8" loc="57:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x2adaeac4b290" loc="67:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="59:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param amsg    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2adaeac4b020" loc="67:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x2adaeac60a60" loc="110:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2adaeac604a8" loc="110:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x2adaeac607e0" loc="110:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x2adaeac4ab48" loc="92:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="79:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2adaeac4a590" loc="92:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x2adaeac4a8c8" loc="92:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x2adaeac5e2d0" loc="136:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="127:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  amsg   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2adaeac5e060" loc="136:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x2adaeac5c020" loc="151:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  amsg    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2adaeac5ea60" loc="151:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x2adaeac5ed60" loc="151:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x2adaeac34d30"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x2adaeac5f6c8" loc="125:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="112:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  amsg   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2adaeac5f458" loc="125:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x2adaeac5ba18" loc="176:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="168:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param amsg the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2adaeac33130"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x2adaeac5b468" loc="176:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x2adaeac5b798" loc="176:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2adaeac33130"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x2adaeac5a290" loc="184:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
        <documentation loc="178:/opt/tinyos-2.0.2/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x2adaeac33130"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="45:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="payloadLength" ref="0x2adaeac77290" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
        <documentation loc="81:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This call is identical&#10; to &#60;TT>Packet.payloadLength&#60;/TT>, and is included in Receive as a&#10; convenience.&#10;&#10; @param  msg      the packet&#10; @return          the length of the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac77020" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0x2adaeac625f8" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
        <documentation loc="47:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  msg      the receied packet&#10; @param  payload  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return          a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
              <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac6bc30" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x2adaeac62020" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2adaeac62330" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2adaeac616c8" loc="79:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
        <documentation loc="69:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
          <short>&#10; Return point to a protocol's payload region in a packet.</short>
          <long>&#10; Return point to a protocol's payload region in a packet.  If len&#10; is not NULL, getPayload will return the length of the payload in&#10; it. This call is identical to &#60;TT>Packet.getPayload&#60;/TT>, and is&#10; included in Receive as a convenience.&#10;&#10; @param  msg      the packet&#10; @param  len      a pointer to where to store the payload length&#10; @return          a pointer to the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeac610c8" loc="79:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2adaeac61410" loc="79:/opt/tinyos-2.0.2/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="42:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2adaeacc6be8" loc="42:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2adaeacc6be8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2adaeacc14c8" loc="50:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
        <documentation loc="44:/opt/tinyos-2.0.2/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2adaeace53f8" loc="46:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2adaeace53f8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2adaeace5628" loc="46:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeace5628"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x2adaeace4020" loc="53:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeace5628"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x2adaeace2070" loc="65:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <documentation loc="62:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x2adaeace4838" loc="60:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2adaeace2760" loc="71:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2adaeacd8e10" loc="45:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2adaeacd8e10"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2adaeacd5068" loc="45:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeacd5068"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x2adaeacd1958" loc="98:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeacd5068"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2adaeacd4a78" loc="67:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x2adaeacd1020" loc="92:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeacd5068"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeacd5068"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x2adaeacd2a08" loc="92:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeacd5068"/></type-var>
          </variable>
          <variable name="dt" ref="0x2adaeacd2d28" loc="92:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeacd5068"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x2adaeacd2258" loc="77:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x2adaeacd0110" loc="105:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeacd5068"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2adaeacd5b28" loc="55:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeacd5068"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2adaeacd58b8" loc="55:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeacd5068"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2adaeacd4328" loc="62:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/opt/tinyos-2.0.2/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x2adaead0ba48" loc="36:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea95d450"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2adaea95d858"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x2adaead07e18" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea96b848"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2adaea96bc50"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x2adaead08c70" loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea961128"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2adaea961530"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x2adaead07678" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea961128"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2adaea961530"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x2adaead07408" loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea961128"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x2adaea961530"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x2adaead05828" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea96b848"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2adaea96bc50"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x2adaead055b8" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea96b848"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x2adaea96bc50"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x2adaead084c8" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea95d450"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2adaea95d858"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x2adaead08258" loc="37:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea95d450"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x2adaea95d858"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="11:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0x2adaead12998" loc="38:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x2adaead101d8" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0x2adaead12290" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x2adaead10988" loc="50:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x2adaead130d8" loc="21:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea9659b8"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x2adaea965dc0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x2adaead13a88" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea9659b8"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2adaea965dc0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x2adaead13818" loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x2adaea9659b8"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x2adaea965dc0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x2adaead03020" loc="32:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaead03020"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x2adaead19738" loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x2adaead029d0" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2adaead038d8" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="35:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaead03020"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2adaead1b110" loc="53:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2adaead18020" loc="71:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2adaead02290" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaead03020"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2adaead02020" loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaead03020"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2adaead1b808" loc="56:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2adaead19020" loc="59:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x2adaeacfc418" loc="46:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2adaeacfc418"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x2adaeacf7900" loc="89:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="88:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x2adaeacf8a40" loc="78:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x2adaeacfccb8" loc="52:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2adaeacfc418"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x2adaeacf5290" loc="95:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2adaeacf5020" loc="95:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x2adaeacf5a10" loc="101:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x2adaeacf94c0" loc="66:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="65:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x2adaeacfbd50" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x2adaeacf71d8" loc="84:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x2adaeacfb630" loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="54:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2adaeacfc418"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x2adaeacfb3c0" loc="58:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x2adaeacfc418"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x2adaeacf9bb8" loc="69:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2adaeacf8328" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="71:/opt/tinyos-2.0.2/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="33:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x2adaeae84808" loc="48:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="35:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param msg - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeae84598" loc="48:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x2adaeae83408" loc="60:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="50:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param msg - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeae83198" loc="60:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x2adaeae82020" loc="74:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="62:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param msg - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeae83ce8" loc="74:/opt/tinyos-2.0.2/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="44:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x2adaeae91cc0" loc="64:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   msg     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeae91730" loc="64:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x2adaeae91a40" loc="64:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x2adaeae8bdd8" loc="114:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="104:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; The length of this region is maxPayloadLength(). This command&#10; behaves similarly to &#60;tt>Packet.getPayload&#60;/tt> (minus the&#10; length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param   msg    the packet&#10; @return         a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeae8bb30" loc="114:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x2adaeae8b328" loc="101:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2adaeae8eb50" loc="78:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="66:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   msg    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeae8e8e0" loc="78:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2adaeae8ca00" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param msg   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeae8c458" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x2adaeae8c780" loc="89:/opt/tinyos-2.0.2/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
      <documentation loc="32:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author David Moss&#10; @author Jonathan Hui&#10;</long>
      </documentation>
      <function command="" provided="0" name="getLocalSleepInterval" ref="0x2adaeaef8020" loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxDutyCycle" ref="0x2adaeaef3738" loc="113:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="109:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the destination node's duty cycle configured in this message&#10;     in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeaef34c8" loc="113:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sleepIntervalToDutyCycle" ref="0x2adaeaef2e28" loc="129:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="123:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; </short>
          <long>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; @param sleepInterval The sleep interval in units of [ms]&#10; @return The duty cycle in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepInterval" ref="0x2adaeaef2bb8" loc="129:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalDutyCycle" ref="0x2adaeaef73a0" loc="82:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="79:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return this node's radio duty cycle rate, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxSleepInterval" ref="0x2adaeaef62a0" loc="91:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="85:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.&#10; @param msg Pointer to the message that will be sent&#10; @param sleepInterval The receiving node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeaef7b08" loc="91:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="sleepIntervalMs" ref="0x2adaeaef6020" loc="91:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalDutyCycle" ref="0x2adaeaef89d8" loc="77:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="60:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].</short>
          <long>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].&#10; For example, to get a 0.05% duty cycle,&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(5);  // or equivalently...&#10;   call LowPowerListening.setDutyCycle(00005);  // for better readability?&#10; &#60;/code>&#10;&#10; For a 100% duty cycle (always on),&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(10000);&#10; &#60;/code>&#10;&#10; This is the equivalent of setting the local sleep interval explicitly.&#10; &#10; @param dutyCycle The duty cycle percentage, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x2adaeaef8768" loc="77:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxDutyCycle" ref="0x2adaeaef4b60" loc="107:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="98:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.&#10; Duty cycle is in units of [percentage*100], i.e. 0.25% duty cycle = 25.&#10; &#10; @param msg Pointer to the message that will be sent&#10; @param dutyCycle The duty cycle of the receiving mote, in units of &#10;     [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeaef4580" loc="107:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dutyCycle" ref="0x2adaeaef48e0" loc="107:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dutyCycleToSleepInterval" ref="0x2adaeaef2290" loc="121:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="115:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; </short>
          <long>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; @param dutyCycle The duty cycle in units of [percentage*100]&#10; @return The equivalent sleep interval, in units of [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x2adaeaef2020" loc="121:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxSleepInterval" ref="0x2adaeaef6de0" loc="96:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="93:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the destination node's sleep interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeaef6b70" loc="96:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalSleepInterval" ref="0x2adaeaef9640" loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="43:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Set this this node's radio sleep interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio sleep interval, in milliseconds.&#10; Once every interval, the node will sleep and perform an Rx check &#10; on the radio.  Setting the sleep interval to 0 will keep the radio&#10; always on.&#10;&#10; This is the equivalent of setting the local duty cycle rate.&#10;&#10; @param sleepIntervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepIntervalMs" ref="0x2adaeaef93d0" loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaControl" loc="29:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
        <short>&#10; Interface for activating/deactivating congestion control.</short>
        <long>&#10; Interface for activating/deactivating congestion control.&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   August 31 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableCca" ref="0x2adaeaee0ac8" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="36:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Disable congestion control.</short>
          <long>&#10; Disable congestion control.&#10; @return SUCCESS if congestion control disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableCca" ref="0x2adaeaee0328" loc="34:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="30:/opt/tinyos-2.0.2/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Enable congestion control.</short>
          <long>&#10; Enable congestion control.&#10; @return SUCCESS if congestion control enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaBackoff" loc="29:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
        <short>&#10; Interface for MAC Backoff values from the radio stack.</short>
        <long>&#10; Interface for MAC Backoff values from the radio stack.&#10; Allows application to change the backoff on a per packet basis.&#10; Only used if congestion control is enabled.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function event="" provided="0" name="congestion" ref="0x2adaeaeddd10" loc="43:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="38:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return backoff time after message m could not be send due to congestion.</short>
          <long>&#10; Return backoff time after message m could not be send due to congestion.&#10; The units are raio dependent.&#10; @return Backoff time after congestion&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x2adaeaeddaa0" loc="43:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initial" ref="0x2adaeaedd290" loc="36:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return initial backoff time before attempting to send message m.</short>
          <long>&#10; Return initial backoff time before attempting to send message m. The&#10; units are radio dependent.&#10; @return Initial backoff time&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x2adaeaedd020" loc="36:/opt/tinyos-2.0.2/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioTimeStamping" loc="33:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
      <documentation loc="22:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
        <short>&#10; Interface for receiving time stamp information from the radio.</short>
        <long>&#10; Interface for receiving time stamp information from the radio.&#10; This information is also embedded in packet metadata.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   October 10 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="transmittedSFD" ref="0x2adaeaedb910" loc="39:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
        <documentation loc="35:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
          <short> &#10; Provides the time at which start of frame delimiter has been&#10; transmitted: units are in terms of a 32kHz clock.</short>
          <long> &#10; Provides the time at which start of frame delimiter has been&#10; transmitted: units are in terms of a 32kHz clock.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioTimeStamping"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x2adaeaedb318" loc="39:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
          <variable name="p_msg" ref="0x2adaeaedb690" loc="39:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedSFD" ref="0x2adaeaeda378" loc="50:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
          <short> &#10; Provides the time at which start of frame delimiter was received:&#10; units are in terms of a 32kHz clock.</short>
          <long> &#10; Provides the time at which start of frame delimiter was received:&#10; units are in terms of a 32kHz clock.  &#60;b>NOTE&#60;/b> that receiving&#10; a receivedSFD() event does NOT mean that a packet will be&#10; received; the transmission may stop, become corrupted, or be&#10; filtered by the physical or link layers.  The number of rxSFD&#10; events will always be great than or equal to the number of&#10; Receive message events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioTimeStamping"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x2adaeaeda108" loc="50:/opt/tinyos-2.0.2/tos/interfaces/RadioTimeStamping.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="48:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
      <documentation loc="25:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x2adaeaf36e38" loc="48:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x2adaeaf36e38"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x2adaeaf320c8" loc="48:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeaf320c8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x2adaeaf32b60" loc="55:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
        <documentation loc="50:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeaf320c8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x2adaeaf328f0" loc="55:/opt/tinyos-2.0.2/tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x2adaeaf320c8"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="51:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2adaeaf33bc0" loc="51:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2adaeaf33bc0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2adaeaf2f490" loc="57:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2adaeaf2e2a0" loc="65:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
        <documentation loc="59:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2adaeaf33bc0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2adaeaf2fbd8" loc="65:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2adaeaf2e020" loc="65:/opt/tinyos-2.0.2/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2adaeaf33bc0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="29:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x2adaeaf3a8a8" loc="41:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
        <documentation loc="37:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x2adaeaf3a110" loc="35:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
        <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Squelch" loc="34:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
      <documentation loc="30:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
        <short>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; </short>
        <long>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="get" ref="0x2adaeaf3c378" loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="42:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Return current estimated noise floor&#10; </short>
          <long>&#10; Return current estimated noise floor&#10; @return Noise floor value&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="settled" ref="0x2adaeaf3caa0" loc="53:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; </short>
          <long>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; @return TRUE if noise floor estimate considered stable, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="adjust" ref="0x2adaeaf26bc8" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="36:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Adjust noise floor based on new noise measurement&#10; </short>
          <long>&#10; Adjust noise floor based on new noise measurement&#10; @param data noise measurement&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2adaeaf26958" loc="40:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Squelch.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Control" loc="34:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
      <documentation loc="29:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <short>&#10; CC1000 internal radio control interface.</short>
        <long>&#10; CC1000 internal radio control interface.&#10; @author Philip Buonadonna&#10; @aythor Jaein Jeong&#10;</long>
      </documentation>
      <function command="" provided="0" name="tunePreset" ref="0x2adaeaf25290" loc="49:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.</short>
          <long>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.  Calling Tune will allso reset the rfpower and LockVal&#10; selections to the table values.&#10; &#10; @param freq The index into the CC1K_Params table that holds the&#10; desired preset frequency parameters.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="freq" ref="0x2adaeaf25020" loc="49:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="biasOn" ref="0x2adaeaf21420" loc="93:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="87:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the bias power on.</short>
          <long>&#10; Turn the bias power on. This function must be followed by a call to&#10; either rxMode() or txMode() to place the radio in a recieve/transmit&#10; state respectively. There is approximately a 200us delay when&#10; restoring bias power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRFPower" ref="0x2adaeaf20690" loc="110:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="105:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the present RF power index.</short>
          <long>&#10; Get the present RF power index.&#10;&#10; @return The power index value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tuneManual" ref="0x2adaeaf25d90" loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="51:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to a given frequency.</short>
          <long>&#10; Tune the radio to a given frequency. Since the CC1000 uses a digital&#10; frequency synthesizer, it cannot tune to just an arbitrary frequency.&#10; This routine will determine the closest achievable channel, compute&#10; the necessary parameters and tune the radio.&#10; &#10; @param The desired channel frequency, in Hz.&#10; &#10; @return The actual computed channel frequency, in Hz.  A return value&#10; of '0' indicates that no frequency was computed and the radio was not&#10; tuned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="DesiredFreq" ref="0x2adaeaf25b20" loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x2adaea0f6db0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="selectLock" ref="0x2adaeaf1f030" loc="118:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="112:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.</short>
          <long> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.  See&#10; the CC1000 data sheet for the available signals.&#10; &#10; @param LockVal The index of the signal to monitor at the CHP_OUT pin&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="LockVal" ref="0x2adaeaf20d98" loc="118:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x2adaeaf0e868" loc="39:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="36:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Initialise the radio to its default state.</short>
          <long>&#10; Initialise the radio to its default state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLock" ref="0x2adaeaf1f808" loc="126:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="120:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the binary value from the CHP_OUT pin.</short>
          <long>&#10; Get the binary value from the CHP_OUT pin.  Analog signals cannot be&#10; read using function.&#10;&#10; @return 1 - Pin is high or 0 - Pin is low&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="coreOn" ref="0x2adaeaf22c18" loc="85:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.</short>
          <long>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.  This will result in approximately a 750&#10; uA power savings.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x2adaeaf24dc0" loc="73:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="70:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio into transmit mode.</short>
          <long>&#10; Shift the CC1000 Radio into transmit mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOStatus" ref="0x2adaeaf1d020" loc="136:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="128:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.</short>
          <long>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.  This information is used to determine if the data&#10; from the CC1000 needs to be inverted or not.&#10;&#10; @return TRUE if high-side LO injection is being used (i.e. data does NOT need to be inverted&#10; at the receiver.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x2adaeaf22508" loc="78:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="75:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio in receive mode.</short>
          <long>&#10; Shift the CC1000 Radio in receive mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x2adaeaf246f8" loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="65:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the CC1000 off&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRFPower" ref="0x2adaeaf21e20" loc="103:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="95:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Set the transmit RF power value.</short>
          <long>&#10; Set the transmit RF power value.  The input value is simply an&#10; arbitrary index that is programmed into the CC1000 registers.  Consult&#10; the CC1000 datasheet for the resulting power output/current&#10; consumption values.&#10;&#10; @param power A power index between 1 and 255.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="power" ref="0x2adaeaf21bb0" loc="103:/opt/tinyos-2.0.2/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="65:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
      <documentation loc="51:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2adaeaf12a10" loc="74:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2adaeaf0f1d8" loc="84:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
        <documentation loc="76:/opt/tinyos-2.0.2/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ByteRadio" loc="19:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
      <documentation loc="10:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <short>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission).</short>
        <long>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). This interface specifies the interaction between these&#10; two components.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function event="" provided="0" name="rts" ref="0x2adaeaf11af0" loc="25:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="21:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive wants to send a packet.</short>
          <long>&#10; SendReceive wants to send a packet.&#10; @param msg Message to be sent.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x2adaeaf11880" loc="25:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
                <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="listen" ref="0x2adaeaf2cba8" loc="61:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Enable listening for incoming packets.</short>
          <long>&#10; Enable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="syncing" ref="0x2adaeaf2a520" loc="85:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="76:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Detect if SendReceive is attempting to sync with an incoming packet.</short>
          <long>&#10; Detect if SendReceive is attempting to sync with an incoming packet.&#10; During sync, idleByte events are not signaled. If sync is successful,&#10; an rx() event will be signaled, if it fails, idleByte events will&#10; resume. If syncing() returns TRUE, the last idleByte() event must&#10; have had preamble = TRUE.&#10;&#10; @return TRUE if a sync attempt is in progress, FALSE if not.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x2adaeaf28458" loc="95:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="92:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Message reception is complete.</short>
          <long>&#10; Message reception is complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPreambleLength" ref="0x2adaeaf2c490" loc="56:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="52:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Get message preamble length.</short>
          <long>&#10; Get message preamble length.&#10; @return Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="idleByte" ref="0x2adaeaf2bcb0" loc="74:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.</short>
          <long>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.&#10; @param preamble TRUE if a message preamble byte has been received&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="preamble" ref="0x2adaeaf2ba40" loc="74:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cts" ref="0x2adaeaf0d258" loc="32:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Access to the media granted.</short>
          <long>&#10; Access to the media granted. Start sending. SendReceive must signal&#10; sendDone when transmission is complete. Note: the media-access-contro&#10; layer must have enabled listening before calling cts().&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPreambleLength" ref="0x2adaeaf2dc70" loc="50:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Set message preamble length.</short>
          <long>&#10; Set message preamble length.&#10; @param bytes Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bytes" ref="0x2adaeaf2da00" loc="50:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x2adaeaf2d2a8" loc="44:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Transmission complete.</short>
          <long>&#10; Transmission complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x2adaeaf2b328" loc="66:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="63:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Disable listening for incoming packets.</short>
          <long>&#10; Disable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTxMessage" ref="0x2adaeaf0dac8" loc="39:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="34:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.</short>
          <long>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.&#10; @return Message being transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x2adaeac4f978"/>
              <typename><typedef-ref name="message_t" ref="0x2adaeac4c020"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rx" ref="0x2adaeaf2ad60" loc="90:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="87:/opt/tinyos-2.0.2/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; A message is being received&#10;</short>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="67:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
      <documentation loc="53:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2007/04/15 20:05:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2adaeb095110" loc="110:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x2adaeb0971d8" loc="87:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="80:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x2adaeb098888" loc="78:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="68:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2adaeb097960" loc="92:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="89:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2adaeb095af8" loc="118:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
        <documentation loc="112:/opt/tinyos-2.0.2/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="44:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x2adaeb13e020" loc="55:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="51:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x2adaeb13f6f8" loc="49:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x2adaeb141998" loc="49:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2adaeb141998"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x2adaeb13a258" loc="55:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
        <documentation loc="50:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x2adaeb138020" loc="63:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
        <documentation loc="57:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2adaeb141998"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x2adaeb13a968" loc="63:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x2adaeb13ac68" loc="63:/opt/tinyos-2.0.2/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x2adaeb141998"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="68:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2adaeb152768" loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="70:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2adaeb153a60" loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2adaeb153db8" loc="91:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2adaeb152178" loc="92:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2adaeb1524c8" loc="92:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2adaeb14f3f0" loc="110:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="94:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2adaeb150368" loc="110:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2adaeb150688" loc="110:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x2adaeb1509c0" loc="110:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x2adaeb150d70" loc="111:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x2adaeb14f140" loc="111:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="43:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="33:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x2adaeb156020" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x2adaeb157250" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x2adaeb1575a8" loc="61:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x2adaeb157910" loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x2adaeb157c60" loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2adaeb155898" loc="82:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="74:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2adaeb155020" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="64:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2adaeb156a28" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x2adaeb156d48" loc="72:/opt/tinyos-2.0.2/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="39:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="27:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x2adaeb16a020" loc="105:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="102:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x2adaeb171020" loc="44:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="40:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2adaea949300"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x2adaea9497b8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x2adaeb167290" loc="131:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="126:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x2adaeb167020" loc="131:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x2adaeb16a860" loc="113:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="109:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x2adaeb16fb98" loc="73:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="70:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x2adaeb1719f8" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2adaea949300"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2adaea9497b8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x2adaeb171788" loc="49:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2adaea949300"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x2adaea9497b8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x2adaeb16ea68" loc="82:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x2adaeb1687b8" loc="124:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="119:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x2adaeb167a28" loc="141:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="133:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x2adaeb16e328" loc="77:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="74:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x2adaeb16c8f8" loc="90:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="87:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x2adaeb16c1d8" loc="86:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x2adaeb16b070" loc="97:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x2adaeb168020" loc="118:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="114:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x2adaeb170c48" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="56:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2adaea94fcd8"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2adaea94e438"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x2adaeb1709d8" loc="60:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2adaea94fcd8"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2adaea94e438"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x2adaeb16b828" loc="101:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="98:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x2adaeb170258" loc="55:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="51:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x2adaea94fcd8"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x2adaea94e438"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x2adaeb16f438" loc="66:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="62:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x2adaeb166588" loc="147:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="143:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x2adaeb166318" loc="147:/opt/tinyos-2.0.2/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x2adaea0f6378"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="65:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="51:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x2adaeb14cc28" loc="74:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x2adaeb175448" loc="84:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="76:/opt/tinyos-2.0.2/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="36:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.4 $&#10; @date $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x2adaeb1d01d8" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
        <documentation loc="37:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2adaeb1d0aa0" loc="51:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007/02/04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x2adaeb1fa020" loc="56:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x2adaeb1f9020" loc="73:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x2adaeb1fb680" loc="46:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x2adaeb1fa820" loc="65:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x2adaeb1f98e8" loc="81:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/opt/tinyos-2.0.2/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="72:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="59:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x2adaeb1f7720" loc="80:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="73:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x2adaeb1f5020" loc="88:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="82:/opt/tinyos-2.0.2/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x2adaea0f4910"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="35:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x2adaeb1ec290" loc="69:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="62:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a cleint id&#10;&#10; </short>
          <long>&#10; Enqueue a cleint id&#10;&#10; @param cleintId - the cleint id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2adaeb1f88a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2adaeb1ec020" loc="69:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2adaeb1f88a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x2adaeb1ef360" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="37:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x2adaeb1efde0" loc="52:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x2adaea8de448"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2adaeb1f88a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x2adaeb1efb70" loc="52:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x2adaeb1f88a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x2adaeb1ed6d8" loc="60:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
        <documentation loc="54:/opt/tinyos-2.0.2/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the cleint id of the next resource in the queue.</short>
          <long>&#10; Retreive the cleint id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The cleint id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x2adaeb1f88a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="45:/opt/tinyos-2.0.2/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="31:/opt/tinyos-2.0.2/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x2adaeb243c18" loc="52:/opt/tinyos-2.0.2/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="46:/opt/tinyos-2.0.2/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="42:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
      <documentation loc="23:/opt/tinyos-2.0.2/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.5 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x2adaeb2c4868" loc="42:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x2adaeb2c4868"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x2adaeb2c1338" loc="53:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
        <documentation loc="44:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x2adaea8e8a98"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x2adaeb2c4868"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x2adaeb2c10c8" loc="53:/opt/tinyos-2.0.2/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x2adaeb2c4868"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="36:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="32:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x2adaeb2d2290" loc="48:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="45:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x2adaeb302110" loc="58:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="55:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x2adaeb2d29f0" loc="53:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="50:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x2adaeac33130"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x2adaeb2d3a78" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="38:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2adaeac33130"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x2adaeb2d34c0" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x2adaeac33130"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x2adaeb2d37f8" loc="43:/opt/tinyos-2.0.2/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x2adaeac334e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
